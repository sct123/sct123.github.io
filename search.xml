<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JSP</title>
    <url>/2020/11/17/JSPIntro/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="1-什么是JSP？"><a href="#1-什么是JSP？" class="headerlink" title="1.什么是JSP？"></a>1.什么是JSP？</h3><p>Java Server Pages,java服务器端页面，一种动态网页开发技术。它使用JSP标签在HTML网页中插入Java代码。标签通常以&lt;%开头以%&gt;结束。</p>
<p>JSP是一种Java servlet，主要用于实现Java web应用程序的用户界面部分。网页开发者们通过结合HTML代码、XHTML代码、XML元素以及嵌入JSP操作和命令来编写JSP。</p>
<a id="more"></a>

<h3 id="2-JSP原理"><a href="#2-JSP原理" class="headerlink" title="2.JSP原理"></a>2.JSP原理</h3><h5 id="JSP是怎么执行的？"><a href="#JSP是怎么执行的？" class="headerlink" title="JSP是怎么执行的？"></a>JSP是怎么执行的？</h5><p>服务器内部工作</p>
<p>tomcat中有一个work目录；</p>
<p>IDEA中使用Tomcat的会在IDEA中的Tomcat中生成一个work目录或者项目目录/work:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\Amdministrator\AppData\Local\JetBrains\IntelliJIdea2020.1\tomcat\Unnamed_javawev_jsp\work\Catalina\localhost\ROOT\org\apache\jsp</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/DVRcVg" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/17/DVRcVg.png" alt="DVRcVg.png"></a></p>
<p>打开java类， 发现 jsp 继承了HttpJspBase</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">index_jsp</span> <span class="keyword">extends</span> <span class="title">org</span>.<span class="title">apache</span>.<span class="title">jasper</span>.<span class="title">runtime</span>.<span class="title">HttpJspBase</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">org</span>.<span class="title">apache</span>.<span class="title">jasper</span>.<span class="title">runtime</span>.<span class="title">JspSourceDependent</span>,</span></span><br><span class="line"><span class="class">                 <span class="title">org</span>.<span class="title">apache</span>.<span class="title">jasper</span>.<span class="title">runtime</span>.<span class="title">JspSourceImports</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>而HttpJspBase继承了Servlet</p>
<p><a href="https://imgchr.com/i/DVhGrV" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/17/DVhGrV.png" alt="DVhGrV.png"></a></p>
<p><strong>所以浏览器向服务器发送请求，不管访问什么资源，其实都是在访问Servlet！</strong></p>
<p>JSP最终也会被转换成为一个Java类！</p>
<p>类内的_jspService()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspService</span><span class="params">(<span class="keyword">final</span> javax.servlet.http.HttpServletRequest request, <span class="keyword">final</span> javax.servlet.http.HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> java.io.IOException, javax.servlet.ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) &#123;</span><br><span class="line">      <span class="keyword">final</span> java.lang.String _jspx_method = request.getMethod();</span><br><span class="line">      <span class="keyword">if</span> (<span class="string">"OPTIONS"</span>.equals(_jspx_method)) &#123;</span><br><span class="line">        response.setHeader(<span class="string">"Allow"</span>,<span class="string">"GET, HEAD, POST, OPTIONS"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="string">"GET"</span>.equals(_jspx_method) &amp;&amp; !<span class="string">"POST"</span>.equals(_jspx_method) &amp;&amp; !<span class="string">"HEAD"</span>.equals(_jspx_method)) &#123;</span><br><span class="line">        response.setHeader(<span class="string">"Allow"</span>,<span class="string">"GET, HEAD, POST, OPTIONS"</span>);</span><br><span class="line">        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, <span class="string">"JSP 只允许 GET、POST 或 HEAD。Jasper 还允许 OPTIONS"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//一些内置对象</span></span><br><span class="line">    <span class="keyword">final</span> javax.servlet.jsp.PageContext pageContext;</span><br><span class="line">    <span class="keyword">final</span> javax.servlet.ServletContext application;</span><br><span class="line">    <span class="keyword">final</span> javax.servlet.ServletConfig config;</span><br><span class="line">    javax.servlet.jsp.JspWriter out = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">final</span> java.lang.Object page = <span class="keyword">this</span>;</span><br><span class="line">    javax.servlet.jsp.JspWriter _jspx_out = <span class="keyword">null</span>;</span><br><span class="line">    javax.servlet.jsp.PageContext _jspx_page_context = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      response.setContentType(<span class="string">"text/html; charset=UTF-8"</span>);</span><br><span class="line">      pageContext = _jspxFactory.getPageContext(<span class="keyword">this</span>, request, response,</span><br><span class="line">      			<span class="keyword">null</span>, <span class="keyword">false</span>, <span class="number">8192</span>, <span class="keyword">true</span>);</span><br><span class="line">      _jspx_page_context = pageContext;</span><br><span class="line">      application = pageContext.getServletContext();</span><br><span class="line">      config = pageContext.getServletConfig();</span><br><span class="line">      out = pageContext.getOut();</span><br><span class="line">      _jspx_out = out;</span><br><span class="line">	<span class="comment">//编写的html代码最终也是转换为out.write的形式输出</span></span><br><span class="line">      out.write(<span class="string">"\r\n"</span>);</span><br><span class="line">      out.write(<span class="string">"\r\n"</span>);</span><br><span class="line"></span><br><span class="line">java.text.SimpleDateFormat sdf = <span class="keyword">new</span> java.text.SimpleDateFormat(<span class="string">"yyyy"</span>);</span><br><span class="line">request.setAttribute(<span class="string">"year"</span>, sdf.format(<span class="keyword">new</span> java.util.Date()));</span><br><span class="line">request.setAttribute(<span class="string">"tomcatUrl"</span>, <span class="string">"https://tomcat.apache.org/"</span>);</span><br><span class="line">request.setAttribute(<span class="string">"tomcatDocUrl"</span>, <span class="string">"/docs/"</span>);</span><br><span class="line">request.setAttribute(<span class="string">"tomcatExamplesUrl"</span>, <span class="string">"/examples/"</span>);</span><br><span class="line"></span><br><span class="line">      out.write(<span class="string">"\r\n"</span>);</span><br><span class="line">      out.write(<span class="string">"&lt;!DOCTYPE html&gt;\r\n"</span>);</span><br><span class="line">      out.write(<span class="string">"&lt;html lang=\"en\"&gt;\r\n"</span>);</span><br><span class="line">      out.write(<span class="string">"    &lt;head&gt;\r\n"</span>);</span><br><span class="line">      out.write(<span class="string">"        &lt;meta charset=\"UTF-8\" /&gt;\r\n"</span>);</span><br><span class="line">      out.write(<span class="string">"        &lt;title&gt;"</span>);</span><br><span class="line">      out.print(request.getServletContext().getServerInfo() );</span><br><span class="line">      out.write(<span class="string">"&lt;/title&gt;\r\n"</span>);</span><br><span class="line">      out.write(<span class="string">"        &lt;link href=\"favicon.ico\" rel=\"icon\" type=\"image/x-icon\" /&gt;\r\n"</span>);</span><br><span class="line">      out.write(<span class="string">"        &lt;link href=\"favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\" /&gt;\r\n"</span>);</span><br><span class="line">      out.write(<span class="string">"        &lt;link href=\"tomcat.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\r\n"</span>);</span><br><span class="line">      out.write(<span class="string">"    &lt;/head&gt;\r\n"</span>);</span><br><span class="line">      out.write(<span class="string">"\r\n"</span>);</span><br><span class="line">      out.write(<span class="string">"    &lt;body&gt;\r\n"</span>);</span><br><span class="line">      out.write(<span class="string">"        &lt;div id=\"wrapper\"&gt;\r\n"</span>);</span><br><span class="line">      out.write(<span class="string">"            &lt;div id=\"navigation\" class=\"curved container\"&gt;\r\n"</span>);</span><br><span class="line">      out.write(<span class="string">"                &lt;span id=\"nav-home\"&gt;&lt;a href=\""</span>);</span><br></pre></td></tr></table></figure>





<h3 id="3-JSP基本语法"><a href="#3-JSP基本语法" class="headerlink" title="3.JSP基本语法"></a>3.JSP基本语法</h3><p>脚本程序可以包含任意量的Java语句、变量、方法或表达式，只要它们在脚本语言中是有效的。</p>
<h5 id="脚本程序的语法格式："><a href="#脚本程序的语法格式：" class="headerlink" title="脚本程序的语法格式："></a><strong>脚本程序的语法格式：</strong></h5><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;% 代码片段 %&gt;</span><br></pre></td></tr></table></figure>

<p>或者，您也可以编写与其等价的XML语句，就像下面这样：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;jsp:scriptlet&gt;</span><br><span class="line">   代码片段</span><br><span class="line">&lt;/jsp:scriptlet&gt;</span><br></pre></td></tr></table></figure>

<p><strong>任何文本、HTML标签、JSP元素必须写在脚本程序的外面。</strong></p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;Hello World&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">Hello World!&lt;br&#x2F;&gt;</span><br><span class="line">&lt;%</span><br><span class="line">out.println(&quot;Your IP address is &quot; + request.getRemoteAddr());</span><br><span class="line">%&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h5 id="jsp声明："><a href="#jsp声明：" class="headerlink" title="jsp声明："></a><strong>jsp声明：</strong></h5><p>JSP声明的语法格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%! declaration; [ declaration; ]+ ... %&gt;</span><br></pre></td></tr></table></figure>

<p>或者，您也可以编写与其等价的XML语句，就像下面这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;jsp:declaration&gt;</span><br><span class="line">   代码片段</span><br><span class="line">&lt;&#x2F;jsp:declaration&gt;</span><br></pre></td></tr></table></figure>

<h5 id="JSP表达式："><a href="#JSP表达式：" class="headerlink" title="JSP表达式："></a><strong>JSP表达式：</strong></h5><p>一个JSP表达式中包含的脚本语言表达式，先被转化成String，然后插入到表达式出现的地方。</p>
<p>由于表达式的值会被转化成String，所以您可以在一个文本行中使用表达式而不用去管它是否是HTML标签。</p>
<p>表达式元素中可以包含任何符合Java语言规范的表达式，但是不能使用分号来结束表达式。</p>
<p>JSP表达式的语法格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%&#x3D; 表达式 %&gt;</span><br></pre></td></tr></table></figure>

<p>同样，您也可以编写与之等价的XML语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;jsp:expression&gt;</span><br><span class="line">   表达式</span><br><span class="line">&lt;&#x2F;jsp:expression&gt;</span><br></pre></td></tr></table></figure>

<h5 id="JSP注释："><a href="#JSP注释：" class="headerlink" title="JSP注释："></a><strong>JSP注释：</strong></h5><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%-- --%&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%%&gt;</span><br><span class="line">&lt;%=%&gt;</span><br><span class="line">&lt;%!%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--注释--%&gt;</span><br></pre></td></tr></table></figure>



<h3 id="4-JSP指令"><a href="#4-JSP指令" class="headerlink" title="4.JSP指令"></a>4.JSP指令</h3><p>JSP指令用来设置与整个JSP页面相关的属性。一般写在头部位置</p>
<h5 id="JSP指令语法格式："><a href="#JSP指令语法格式：" class="headerlink" title="JSP指令语法格式："></a>JSP指令语法格式：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ directive attribute&#x3D;&quot;value&quot; %&gt;</span><br></pre></td></tr></table></figure>

<h5 id="这里有三种指令标签："><a href="#这里有三种指令标签：" class="headerlink" title="这里有三种指令标签："></a>这里有三种指令标签：</h5><table>
<thead>
<tr>
<th align="left"><strong>指令</strong></th>
<th align="left"><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">&lt;%@ page … %&gt;</td>
<td align="left">定义页面的依赖属性，比如脚本语言、error页面、缓存需求等等</td>
</tr>
<tr>
<td align="left">&lt;%@ include … %&gt;</td>
<td align="left">包含其他文件</td>
</tr>
<tr>
<td align="left">&lt;%@ taglib … %&gt;</td>
<td align="left">引入标签库的定义，可以是自定义标签</td>
</tr>
</tbody></table>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%<span class="meta">@page</span> args.... %&gt;</span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">""</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--<span class="meta">@include</span>会将两个页面合二为一--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">"common/header.jsp"</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;网页主体&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">"common/footer.jsp"</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%--jSP标签</span><br><span class="line">    jsp:include：拼接页面，本质还是三个</span><br><span class="line">    --%&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">"/common/header.jsp"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;网页主体&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;jsp:include page=<span class="string">"/common/footer.jsp"</span>/&gt;</span><br></pre></td></tr></table></figure>

<h3 id="5-JSP九大内置对象详解"><a href="#5-JSP九大内置对象详解" class="headerlink" title="5.JSP九大内置对象详解"></a>5.JSP九大内置对象详解</h3><h4 id="JSP内置对象-9个内置对象"><a href="#JSP内置对象-9个内置对象" class="headerlink" title="JSP内置对象(9个内置对象):"></a>JSP内置对象(9个内置对象):</h4><p>1.PageContext javax.servlet.jsp.PageContext JSP的页面容器<br>2.request    javax.servlet.http.HttpServletrequest 获取用户的请求信息<br>3.response javax.servlet.http.HttpServletResponse 服务器向客户端的回应信息<br>4.session javax.servlet.http.HttpSession 用来保存每一个用户的信息<br>5.application javax.servlet.ServletContext 表示所有用户的共享信息<br>6.config javax.servlet.ServletConfig 服务器配置信息，可以取得初始化参数<br>7.out javax.servlet.jsp.jspWriter 页面输出<br>8.page java.lang.object)<br>9.exception java.lang.Throwable </p>
<h4 id="九种对象简介："><a href="#九种对象简介：" class="headerlink" title="九种对象简介："></a>九种对象简介：</h4><ol>
<li><strong>out对象</strong>：用于向客户端、浏览器输出数据。</li>
<li><strong>request对象</strong>：封装了来自客户端、浏览器的各种信息。</li>
<li><strong>response对象</strong>：封装了服务器的响应信息。</li>
<li><strong>exception对象</strong>：封装了jsp程序执行过程中发生的异常和错误信息。</li>
<li><strong>config（SerlvetConfig）对象</strong>：封装了应用程序的配置信息。</li>
<li><strong>page对象</strong>：指向了当前jsp程序本身。</li>
<li><strong>session对象</strong>：用来保存会话信息。也就是说，可以实现在同一用户的不同请求之间共享数</li>
<li><strong>application（ServletContext）对象</strong>：代表了当前应用程序的上下文。可以在不同的用户之间共享信息。</li>
<li><strong>pageContext对象</strong>：提供了对jsp页面所有对象以及命名空间的访问。</li>
</ol>
<h4 id="四种属性范围"><a href="#四种属性范围" class="headerlink" title="四种属性范围:"></a><strong>四种属性范围:</strong></h4><p>page(pageContext):只在一个页面中保存属性。 跳转之后无效。<br>request:只在一次请求中有效，服务器跳转之后有效。 客户端跳转无效<br>session:再一次会话中有效。服务器跳转、客户端跳转都有效。 网页关闭重新打开无效<br>application：在整个服务器上保存，所有用户都可使用。 重启服务器后无效</p>
<p>注意：如果设置过多的application属性范围会影响服务器性能。</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">pageContext.PAGE_SCOPE</span><br><span class="line">pageContext.REQUEST_SCOPE</span><br><span class="line">pageContext.SESSION_SCOPE</span><br><span class="line">pageContext.APPLICATION_SCOPE</span><br><span class="line">pageContext.setAttribute(<span class="string">"name"</span>, <span class="string">"liuyang"</span>,pageContext.APPLICATION_SCOPE);</span><br></pre></td></tr></table></figure>





<h3 id="6-JSP标签、JSTL标签、EL表达式"><a href="#6-JSP标签、JSTL标签、EL表达式" class="headerlink" title="6.JSP标签、JSTL标签、EL表达式"></a>6.JSP标签、JSTL标签、EL表达式</h3><p><strong>依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JSTL表达式的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- standard标签库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="jsp标签"><a href="#jsp标签" class="headerlink" title="jsp标签"></a>jsp标签</h4><p>JSP行为标签使用XML语法结构来控制servlet引擎。它能够动态插入一个文件，重用JavaBean组件，引导用户去另一个页面，为Java插件产生相关的HTML等等。</p>
<p>行为标签只有一种语法格式，它严格遵守XML标准：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;jsp:action_name attribute&#x3D;&quot;value&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>行为标签基本上是一些预先就定义好的函数，下表罗列出了一些可用的JSP行为标签：：</p>
<table>
<thead>
<tr>
<th align="left"><strong>语法</strong></th>
<th align="left"><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">jsp:include</td>
<td align="left">用于在当前页面中包含静态或动态资源</td>
</tr>
<tr>
<td align="left">jsp:useBean</td>
<td align="left">寻找和初始化一个JavaBean组件</td>
</tr>
<tr>
<td align="left">jsp:setProperty</td>
<td align="left">设置 JavaBean组件的值</td>
</tr>
<tr>
<td align="left">jsp:getProperty</td>
<td align="left">将 JavaBean组件的值插入到 output中</td>
</tr>
<tr>
<td align="left">jsp:forward</td>
<td align="left">从一个JSP文件向另一个文件传递一个包含用户请求的request对象</td>
</tr>
<tr>
<td align="left">jsp:plugin</td>
<td align="left">用于在生成的HTML页面中包含Applet和JavaBean对象</td>
</tr>
<tr>
<td align="left">jsp:element</td>
<td align="left">动态创建一个XML元素</td>
</tr>
<tr>
<td align="left">jsp:attribute</td>
<td align="left">定义动态创建的XML元素的属性</td>
</tr>
<tr>
<td align="left">jsp:body</td>
<td align="left">定义动态创建的XML元素的主体</td>
</tr>
<tr>
<td align="left">jsp:text</td>
<td align="left">用于封装模板数据</td>
</tr>
</tbody></table>
<h4 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式:${ }"></a>EL表达式:${ }</h4><ul>
<li><strong>获取数据</strong></li>
<li><strong>执行运算</strong></li>
<li><strong>获取web开发的常用对象</strong></li>
</ul>
<h4 id="JSTL标签"><a href="#JSTL标签" class="headerlink" title="JSTL标签"></a>JSTL标签</h4><p>JSP标准标签库（JSTL）是一个JSP标签集合，它封装了JSP应用的通用核心功能。</p>
<p>JSTL支持通用的、结构化的任务，比如迭代，条件判断，XML文档操作，国际化标签，SQL标签。 除了这些，它还提供了一个框架来使用集成JSTL的自定义标签。</p>
<p>根据JSTL标签所提供的功能，可以将其分为5个类别。</p>
<ul>
<li><strong>核心标签</strong></li>
<li><strong>格式化标签</strong></li>
<li><strong>SQL 标签</strong></li>
<li><strong>XML 标签</strong></li>
<li><strong>JSTL 函数</strong></li>
</ul>
<p>核心标签是最常用的 JSTL标签。引用核心标签库的语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix&#x3D;&quot;c&quot; uri&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;jsp&#x2F;jstl&#x2F;core&quot; %&gt;</span><br></pre></td></tr></table></figure>

<p>使用任何库，你必须在每个 JSP 文件中的头部包含 <strong><taglib></strong> 标签。</p>
<p><strong>在Tomcat 也需要引入 jstl的包，否则会报错：JSTL解析错误</strong></p>
<p>c:if</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;h4&gt;if测试&lt;/h4&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">"coreif.jsp"</span> method=<span class="string">"get"</span>&gt;</span><br><span class="line">    &lt;%--</span><br><span class="line">    EL表达式获取表单中的数据</span><br><span class="line">    $&#123;param.参数名&#125;</span><br><span class="line">    --%&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> value=<span class="string">"$&#123;param.username&#125;"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"登录"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--判断如果提交的用户名是管理员，则登录成功--%&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;param.username=='admin'&#125;"</span> <span class="keyword">var</span>=<span class="string">"isAdmin"</span>&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">"管理员欢迎您！"</span>/&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--自闭合标签--%&gt;</span><br><span class="line">&lt;c:out value=<span class="string">"$&#123;isAdmin&#125;"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>javaEE</category>
      </categories>
      <tags>
        <tag>jsp</tag>
      </tags>
  </entry>
  <entry>
    <title>Request与Response</title>
    <url>/2020/11/17/ReqOrResp/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>web服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse；</p>
<ul>
<li>如果要获取客户端请求过来的参数：找HttpServletRequest</li>
<li>如果要给客户端响应一些信息：找HttpServletResponse<a id="more"></a>
<h3 id="1、HttpServletResponse"><a href="#1、HttpServletResponse" class="headerlink" title="1、HttpServletResponse"></a>1、HttpServletResponse</h3><h5 id="1-负责向浏览器发送数据的方法"><a href="#1-负责向浏览器发送数据的方法" class="headerlink" title="1.负责向浏览器发送数据的方法"></a>1.负责向浏览器发送数据的方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">ServletOutputStream <span class="title">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"><span class="function">PrintWriter <span class="title">getWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>
<h5 id="2-负责向浏览器发送响应头的方法"><a href="#2-负责向浏览器发送响应头的方法" class="headerlink" title="2.负责向浏览器发送响应头的方法"></a>2.负责向浏览器发送响应头的方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setCharacterEncoding</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentLength</span><span class="params">(<span class="keyword">int</span> var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentLengthLong</span><span class="params">(<span class="keyword">long</span> var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentType</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDateHeader</span><span class="params">(String var1, <span class="keyword">long</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addDateHeader</span><span class="params">(String var1, <span class="keyword">long</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHeader</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addHeader</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIntHeader</span><span class="params">(String var1, <span class="keyword">int</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addIntHeader</span><span class="params">(String var1, <span class="keyword">int</span> var2)</span></span>;</span><br></pre></td></tr></table></figure>
<h5 id="3-响应的状态码"><a href="#3-响应的状态码" class="headerlink" title="3.响应的状态码"></a>3.响应的状态码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> SC_CONTINUE = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> SC_SWITCHING_PROTOCOLS = <span class="number">101</span>;</span><br><span class="line"><span class="keyword">int</span> SC_OK = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">int</span> SC_CREATED = <span class="number">201</span>;</span><br><span class="line"><span class="keyword">int</span> SC_ACCEPTED = <span class="number">202</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NON_AUTHORITATIVE_INFORMATION = <span class="number">203</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NO_CONTENT = <span class="number">204</span>;</span><br><span class="line"><span class="keyword">int</span> SC_RESET_CONTENT = <span class="number">205</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PARTIAL_CONTENT = <span class="number">206</span>;</span><br><span class="line"><span class="keyword">int</span> SC_MULTIPLE_CHOICES = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">int</span> SC_MOVED_PERMANENTLY = <span class="number">301</span>;</span><br><span class="line"><span class="keyword">int</span> SC_MOVED_TEMPORARILY = <span class="number">302</span>;</span><br><span class="line"><span class="keyword">int</span> SC_FOUND = <span class="number">302</span>;</span><br><span class="line"><span class="keyword">int</span> SC_SEE_OTHER = <span class="number">303</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_MODIFIED = <span class="number">304</span>;</span><br><span class="line"><span class="keyword">int</span> SC_USE_PROXY = <span class="number">305</span>;</span><br><span class="line"><span class="keyword">int</span> SC_TEMPORARY_REDIRECT = <span class="number">307</span>;</span><br><span class="line"><span class="keyword">int</span> SC_BAD_REQUEST = <span class="number">400</span>;</span><br><span class="line"><span class="keyword">int</span> SC_UNAUTHORIZED = <span class="number">401</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PAYMENT_REQUIRED = <span class="number">402</span>;</span><br><span class="line"><span class="keyword">int</span> SC_FORBIDDEN = <span class="number">403</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_FOUND = <span class="number">404</span>;</span><br><span class="line"><span class="keyword">int</span> SC_METHOD_NOT_ALLOWED = <span class="number">405</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_ACCEPTABLE = <span class="number">406</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PROXY_AUTHENTICATION_REQUIRED = <span class="number">407</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUEST_TIMEOUT = <span class="number">408</span>;</span><br><span class="line"><span class="keyword">int</span> SC_CONFLICT = <span class="number">409</span>;</span><br><span class="line"><span class="keyword">int</span> SC_GONE = <span class="number">410</span>;</span><br><span class="line"><span class="keyword">int</span> SC_LENGTH_REQUIRED = <span class="number">411</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PRECONDITION_FAILED = <span class="number">412</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUEST_ENTITY_TOO_LARGE = <span class="number">413</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUEST_URI_TOO_LONG = <span class="number">414</span>;</span><br><span class="line"><span class="keyword">int</span> SC_UNSUPPORTED_MEDIA_TYPE = <span class="number">415</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUESTED_RANGE_NOT_SATISFIABLE = <span class="number">416</span>;</span><br><span class="line"><span class="keyword">int</span> SC_EXPECTATION_FAILED = <span class="number">417</span>;</span><br><span class="line"><span class="keyword">int</span> SC_INTERNAL_SERVER_ERROR = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_IMPLEMENTED = <span class="number">501</span>;</span><br><span class="line"><span class="keyword">int</span> SC_BAD_GATEWAY = <span class="number">502</span>;</span><br><span class="line"><span class="keyword">int</span> SC_SERVICE_UNAVAILABLE = <span class="number">503</span>;</span><br><span class="line"><span class="keyword">int</span> SC_GATEWAY_TIMEOUT = <span class="number">504</span>;</span><br><span class="line"><span class="keyword">int</span> SC_HTTP_VERSION_NOT_SUPPORTED = <span class="number">505</span>;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="4-重定向"><a href="#4-重定向" class="headerlink" title="4.重定向"></a>4.重定向</h5><p>B一个web资源收到客户端A请求后，B他会通知A客户端去访问另外一个web资源C，这个过程叫重定向<br><a href="https://imgchr.com/i/DZAEhF" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/17/DZAEhF.png" alt="DZAEhF.png"></a></p>
<h3 id="2、HttpServletRequest"><a href="#2、HttpServletRequest" class="headerlink" title="2、HttpServletRequest"></a>2、HttpServletRequest</h3><p>HttpServletRequest代表客户端的请求，用户通过Http协议访问服务器，HTTP请求中的所有信息会被封装到HttpServletRequest，通过这个HttpServletRequest的方法，获得客户端的所有信息；</p>
<p><a href="https://imgchr.com/i/DZian0" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/17/DZian0.png" alt="DZian0.png"></a><br><a href="https://imgchr.com/i/DZirh4" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/17/DZirh4.png" alt="DZirh4.png"></a></p>
<h5 id="获取参数，请求转发"><a href="#获取参数，请求转发" class="headerlink" title="获取参数，请求转发"></a>获取参数，请求转发</h5><p><a href="https://imgchr.com/i/DZEVVP" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/17/DZEVVP.png" alt="DZEVVP.png"></a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">    resp.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">    String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line">    String password = req.getParameter(<span class="string">"password"</span>);</span><br><span class="line">    String[] hobbys = req.getParameterValues(<span class="string">"hobbys"</span>);</span><br><span class="line">    System.out.println(<span class="string">"============================="</span>);</span><br><span class="line">    <span class="comment">//后台接收中文乱码问题</span></span><br><span class="line">    System.out.println(username);</span><br><span class="line">    System.out.println(password);</span><br><span class="line">    System.out.println(Arrays.toString(hobbys));</span><br><span class="line">    System.out.println(<span class="string">"============================="</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println(req.getContextPath());</span><br><span class="line">    <span class="comment">//通过请求转发</span></span><br><span class="line">    <span class="comment">//这里的 / 代表当前的web应用</span></span><br><span class="line">    req.getRequestDispatcher(<span class="string">"/success.jsp"</span>).forward(req,resp);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>面试题：请你聊聊重定向和转发的区别？</strong></p>
<p>相同点</p>
<ul>
<li>页面都会实现跳转</li>
</ul>
<p>不同点</p>
<ul>
<li>请求转发的时候，url不会产生变化   307</li>
<li>重定向时候，url地址栏会发生变化； 302</li>
</ul>
<h3 id="附录："><a href="#附录：" class="headerlink" title="附录："></a>附录：</h3><h5 id="HTTP-请求方法"><a href="#HTTP-请求方法" class="headerlink" title="HTTP 请求方法"></a>HTTP 请求方法</h5><p>根据 HTTP 标准，HTTP 请求可以使用多种请求方法。</p>
<p>HTTP1.0 定义了三种请求方法： GET, POST 和 HEAD方法。</p>
<p>HTTP1.1 新增了六种请求方法：OPTIONS、PUT、PATCH、DELETE、TRACE 和 CONNECT 方法。</p>
<table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">GET</td>
<td align="left">请求指定的页面信息，并返回实体主体。</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">HEAD</td>
<td align="left">类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">POST</td>
<td align="left">向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改。</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">PUT</td>
<td align="left">从客户端向服务器传送的数据取代指定的文档的内容。</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">DELETE</td>
<td align="left">请求服务器删除指定的页面。</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">CONNECT</td>
<td align="left">HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">OPTIONS</td>
<td align="left">允许客户端查看服务器的性能。</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left">TRACE</td>
<td align="left">回显服务器收到的请求，主要用于测试或诊断。</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left">PATCH</td>
<td align="left">是对 PUT 方法的补充，用来对已知资源进行局部更新 。</td>
</tr>
</tbody></table>
<h5 id="http请求消息头："><a href="#http请求消息头：" class="headerlink" title="http请求消息头："></a>http请求消息头：</h5><ol>
<li>Accept: text/html,image/* [告诉服务器，我可以接受 文本，网页，图片]</li>
<li>Accept-Charset: ISO-8859-1 [接受字符编码 iso-8859-1]</li>
<li>Accept-Encoding: gzip,compress [可以接受 gzip,compress压缩后数据.].</li>
<li>Accept-Language: en-us,zh-cn [浏览器支持中，英文]</li>
<li>Host: <a href="http://www.sohu.com:80" target="_blank" rel="noopener">www.sohu.com:80</a> [我要找主机是 <a href="http://www.sohu.com:80]">www.sohu.com:80]</a></li>
<li>If-Modified-Since: Tue, 11 Jul 2000 18:23:51 GMT [ 告诉服务器，我的缓冲中有这个资源文件，该文件的时间是 。。。]</li>
<li>Referer: <a href="http://www.sohu.com/index.jsp" target="_blank" rel="noopener">http://www.sohu.com/index.jsp</a> [告诉服务器，我来自哪里,该消息头，常用于防止盗链]</li>
<li>User-Agent: Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 5.0)[告诉服务器，浏览器内核]</li>
<li>Connection: close/Keep-Alive [保持连接，发完数据后，我不关闭连接]</li>
<li>Date: Tue, 11 Jul 2000 18:23:51 GMT [浏览器发送该http请求的时间]</li>
</ol>
<h5 id="HTTP-响应头信息"><a href="#HTTP-响应头信息" class="headerlink" title="HTTP 响应头信息"></a>HTTP 响应头信息</h5><p>HTTP请求头提供了关于请求，响应或者其他的发送实体的信息。</p>
<p>在本章节中我们将具体来介绍HTTP响应头信息。</p>
<table>
<thead>
<tr>
<th align="left">应答头</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Allow</td>
<td align="left">服务器支持哪些请求方法（如GET、POST等）。</td>
</tr>
<tr>
<td align="left">Content-Encoding</td>
<td align="left">文档的编码（Encode）方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE 4、IE 5才支持它。因此，Servlet应该通过查看Accept-Encoding头（即request.getHeader(“Accept-Encoding”)）检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。</td>
</tr>
<tr>
<td align="left">Content-Length</td>
<td align="left">表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStream，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。</td>
</tr>
<tr>
<td align="left">Content-Type</td>
<td align="left">表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。</td>
</tr>
<tr>
<td align="left">Date</td>
<td align="left">当前的GMT时间。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。</td>
</tr>
<tr>
<td align="left">Expires</td>
<td align="left">应该在什么时候认为文档已经过期，从而不再缓存它？</td>
</tr>
<tr>
<td align="left">Last-Modified</td>
<td align="left">文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304（Not Modified）状态。Last-Modified也可用setDateHeader方法来设置。</td>
</tr>
<tr>
<td align="left">Location</td>
<td align="left">表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。</td>
</tr>
<tr>
<td align="left">Refresh</td>
<td align="left">表示浏览器应该在多少时间之后刷新文档，以秒计。除了刷新当前文档之外，你还可以通过setHeader(“Refresh”, “5; URL=<a href="http://host/path&quot;)让浏览器读取指定的页面。" target="_blank" rel="noopener">http://host/path&quot;)让浏览器读取指定的页面。</a>  注意这种功能通常是通过设置HTML页面HEAD区的＜META HTTP-EQUIV=”Refresh” CONTENT=”5;URL=<a href="http://host/path&quot;＞实现，这是因为，自动刷新或重定向对于那些不能使用CGI或Servlet的HTML编写者十分重要。但是，对于Servlet来说，直接设置Refresh头更加方便。" target="_blank" rel="noopener">http://host/path&quot;＞实现，这是因为，自动刷新或重定向对于那些不能使用CGI或Servlet的HTML编写者十分重要。但是，对于Servlet来说，直接设置Refresh头更加方便。</a>   注意Refresh的意义是”N秒之后刷新本页面或访问指定页面”，而不是”每隔N秒刷新本页面或访问指定页面”。因此，连续刷新要求每次都发送一个Refresh头，而发送204状态代码则可以阻止浏览器继续刷新，不管是使用Refresh头还是＜META HTTP-EQUIV=”Refresh” …＞。   注意Refresh头不属于HTTP 1.1正式规范的一部分，而是一个扩展，但Netscape和IE都支持它。</td>
</tr>
<tr>
<td align="left">Server</td>
<td align="left">服务器名字。Servlet一般不设置这个值，而是由Web服务器自己设置。</td>
</tr>
<tr>
<td align="left">Set-Cookie</td>
<td align="left">设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。参见下文有关Cookie设置的讨论。</td>
</tr>
<tr>
<td align="left">WWW-Authenticate</td>
<td align="left">客户应该在Authorization头中提供什么类型的授权信息？在包含401（Unauthorized）状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm=＼”executives＼””)。  注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问（例如.htaccess）。</td>
</tr>
</tbody></table>
<h5 id="HTTP-状态消息"><a href="#HTTP-状态消息" class="headerlink" title="HTTP 状态消息"></a>HTTP 状态消息</h5><h6 id="1xx-信息"><a href="#1xx-信息" class="headerlink" title="1xx: 信息"></a>1xx: 信息</h6><table>
<thead>
<tr>
<th align="left">消息:</th>
<th align="left">描述:</th>
</tr>
</thead>
<tbody><tr>
<td align="left">100 Continue</td>
<td align="left">服务器仅接收到部分请求，但是一旦服务器并没有拒绝该请求，客户端应该继续发送其余的请求。</td>
</tr>
<tr>
<td align="left">101 Switching Protocols</td>
<td align="left">服务器转换协议：服务器将遵从客户的请求转换到另外一种协议。</td>
</tr>
</tbody></table>
<h6 id="2xx-成功"><a href="#2xx-成功" class="headerlink" title="2xx: 成功"></a>2xx: 成功</h6><table>
<thead>
<tr>
<th align="left">消息:</th>
<th align="left">描述:</th>
</tr>
</thead>
<tbody><tr>
<td align="left">200 OK</td>
<td align="left">请求成功（其后是对GET和POST请求的应答文档。）</td>
</tr>
<tr>
<td align="left">201 Created</td>
<td align="left">请求被创建完成，同时新的资源被创建。</td>
</tr>
<tr>
<td align="left">202 Accepted</td>
<td align="left">供处理的请求已被接受，但是处理未完成。</td>
</tr>
<tr>
<td align="left">203 Non-authoritative Information</td>
<td align="left">文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝。</td>
</tr>
<tr>
<td align="left">204 No Content</td>
<td align="left">没有新文档。浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。</td>
</tr>
<tr>
<td align="left">205 Reset Content</td>
<td align="left">没有新文档。但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容。</td>
</tr>
<tr>
<td align="left">206 Partial Content</td>
<td align="left">客户发送了一个带有Range头的GET请求，服务器完成了它。</td>
</tr>
</tbody></table>
<h6 id="3xx-重定向"><a href="#3xx-重定向" class="headerlink" title="3xx: 重定向"></a>3xx: 重定向</h6><table>
<thead>
<tr>
<th align="left">消息:</th>
<th align="left">描述:</th>
</tr>
</thead>
<tbody><tr>
<td align="left">300 Multiple Choices</td>
<td align="left">多重选择。链接列表。用户可以选择某链接到达目的地。最多允许五个地址。</td>
</tr>
<tr>
<td align="left">301 Moved Permanently</td>
<td align="left">所请求的页面已经转移至新的url。</td>
</tr>
<tr>
<td align="left">302 Found</td>
<td align="left">所请求的页面已经临时转移至新的url。</td>
</tr>
<tr>
<td align="left">303 See Other</td>
<td align="left">所请求的页面可在别的url下被找到。</td>
</tr>
<tr>
<td align="left">304 Not Modified</td>
<td align="left">未按预期修改文档。客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。</td>
</tr>
<tr>
<td align="left">305 Use Proxy</td>
<td align="left">客户请求的文档应该通过Location头所指明的代理服务器提取。</td>
</tr>
<tr>
<td align="left">306 <em>Unused</em></td>
<td align="left">此代码被用于前一版本。目前已不再使用，但是代码依然被保留。</td>
</tr>
<tr>
<td align="left">307 Temporary Redirect</td>
<td align="left">被请求的页面已经临时移至新的url。</td>
</tr>
</tbody></table>
<h6 id="4xx-客户端错误"><a href="#4xx-客户端错误" class="headerlink" title="4xx: 客户端错误"></a>4xx: 客户端错误</h6><table>
<thead>
<tr>
<th align="left">消息:</th>
<th align="left">描述:</th>
</tr>
</thead>
<tbody><tr>
<td align="left">400 Bad Request</td>
<td align="left">服务器未能理解请求。</td>
</tr>
<tr>
<td align="left">401 Unauthorized</td>
<td align="left">被请求的页面需要用户名和密码。</td>
</tr>
<tr>
<td align="left">402 Payment Required</td>
<td align="left">此代码尚无法使用。</td>
</tr>
<tr>
<td align="left">403 Forbidden</td>
<td align="left">对被请求页面的访问被禁止。</td>
</tr>
<tr>
<td align="left">404 Not Found</td>
<td align="left">服务器无法找到被请求的页面。</td>
</tr>
<tr>
<td align="left">405 Method Not Allowed</td>
<td align="left">请求中指定的方法不被允许。</td>
</tr>
<tr>
<td align="left">406 Not Acceptable</td>
<td align="left">服务器生成的响应无法被客户端所接受。</td>
</tr>
<tr>
<td align="left">407 Proxy Authentication Required</td>
<td align="left">用户必须首先使用代理服务器进行验证，这样请求才会被处理。</td>
</tr>
<tr>
<td align="left">408 Request Timeout</td>
<td align="left">请求超出了服务器的等待时间。</td>
</tr>
<tr>
<td align="left">409 Conflict</td>
<td align="left">由于冲突，请求无法被完成。</td>
</tr>
<tr>
<td align="left">410 Gone</td>
<td align="left">被请求的页面不可用。</td>
</tr>
<tr>
<td align="left">411 Length Required</td>
<td align="left">“Content-Length” 未被定义。如果无此内容，服务器不会接受请求。</td>
</tr>
<tr>
<td align="left">412 Precondition Failed</td>
<td align="left">请求中的前提条件被服务器评估为失败。</td>
</tr>
<tr>
<td align="left">413 Request Entity Too Large</td>
<td align="left">由于所请求的实体的太大，服务器不会接受请求。</td>
</tr>
<tr>
<td align="left">414 Request-url Too Long</td>
<td align="left">由于url太长，服务器不会接受请求。当post请求被转换为带有很长的查询信息的get请求时，就会发生这种情况。</td>
</tr>
<tr>
<td align="left">415 Unsupported Media Type</td>
<td align="left">由于媒介类型不被支持，服务器不会接受请求。</td>
</tr>
<tr>
<td align="left">416</td>
<td align="left">服务器不能满足客户在请求中指定的Range头。</td>
</tr>
<tr>
<td align="left">417 Expectation Failed</td>
<td align="left"></td>
</tr>
</tbody></table>
<h6 id="5xx-服务器错误"><a href="#5xx-服务器错误" class="headerlink" title="5xx: 服务器错误"></a>5xx: 服务器错误</h6><table>
<thead>
<tr>
<th align="left">消息:</th>
<th align="left">描述:</th>
</tr>
</thead>
<tbody><tr>
<td align="left">500 Internal Server Error</td>
<td align="left">请求未完成。服务器遇到不可预知的情况。</td>
</tr>
<tr>
<td align="left">501 Not Implemented</td>
<td align="left">请求未完成。服务器不支持所请求的功能。</td>
</tr>
<tr>
<td align="left">502 Bad Gateway</td>
<td align="left">请求未完成。服务器从上游服务器收到一个无效的响应。</td>
</tr>
<tr>
<td align="left">503 Service Unavailable</td>
<td align="left">请求未完成。服务器临时过载或当机。</td>
</tr>
<tr>
<td align="left">504 Gateway Timeout</td>
<td align="left">网关超时。</td>
</tr>
<tr>
<td align="left">505 HTTP Version Not Supported</td>
<td align="left">服务器不支持请求中指明的HTTP协议版本。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>javaEE</category>
      </categories>
      <tags>
        <tag>servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet</title>
    <url>/2020/11/17/Servlet/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="1-Servlet简介"><a href="#1-Servlet简介" class="headerlink" title="1.Servlet简介"></a>1.Servlet简介</h3><ul>
<li>Servlet就是sun公司开发动态web的一门技术</li>
<li>Sun在这些API中提供一个接口叫做：Servlet，如果你想开发一个Servlet程序，只需要完成两个小步骤：<ul>
<li>编写一个类，实现Servlet接口</li>
<li>把开发好的Java类部署到web服务器中。</li>
</ul>
</li>
</ul>
<p><strong>把实现了Servlet接口的Java程序称为，Servlet</strong></p>
<a id="more"></a>
<h3 id="2-Servlet的创建"><a href="#2-Servlet的创建" class="headerlink" title="2.Servlet的创建"></a>2.Servlet的创建</h3><h5 id="1-在pom-xml中添加依赖"><a href="#1-在pom-xml中添加依赖" class="headerlink" title="1.在pom.xml中添加依赖"></a>1.在pom.xml中添加依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-创建java类实现Servlet-接口-直接继承HttpServlet"><a href="#2-创建java类实现Servlet-接口-直接继承HttpServlet" class="headerlink" title="2.创建java类实现Servlet 接口(直接继承HttpServlet)"></a>2.创建java类实现Servlet 接口(直接继承HttpServlet)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//由于get或者post只是请求实现的不同的方式，可以相互调用，业务逻辑都一样；</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//ServletOutputStream outputStream = resp.getOutputStream();</span></span><br><span class="line">        PrintWriter writer = resp.getWriter(); <span class="comment">//响应流</span></span><br><span class="line">        writer.print(<span class="string">"Hello,Serlvet"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-web-xml中添加映射"><a href="#3-web-xml中添加映射" class="headerlink" title="3.web.xml中添加映射"></a>3.web.xml中添加映射</h5><pre><code>&lt;!--注册Servlet--&gt;
&lt;servlet&gt;
    &lt;servlet-name&gt;hello&lt;/servlet-name&gt;
    &lt;servlet-class&gt;cn.howsyc.servlet.HelloServlet&lt;/servlet-class&gt;
&lt;/servlet&gt;
&lt;!--Servlet的请求路径--&gt;
&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;hello&lt;/servlet-name&gt;
    &lt;!--‘/’不能少了--&gt;
    &lt;url-pattern&gt;/hello&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;</code></pre><h5 id="4-配置tmocat"><a href="#4-配置tmocat" class="headerlink" title="4.配置tmocat"></a>4.配置tmocat</h5><p>注意：配置项目发布的路径就可以了</p>
<h3 id="3-Servlet原理"><a href="#3-Servlet原理" class="headerlink" title="3.Servlet原理"></a>3.Servlet原理</h3><p><a href="https://imgchr.com/i/DVxQGq" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/11/17/DVxQGq.png" alt="DVxQGq.png"></a></p>
<h3 id="4-Mapping问题："><a href="#4-Mapping问题：" class="headerlink" title="4.Mapping问题："></a>4.Mapping问题：</h3><h5 id="1-一个Servlet可以指定一个或多个映射路径"><a href="#1-一个Servlet可以指定一个或多个映射路径" class="headerlink" title="1.一个Servlet可以指定一个或多个映射路径"></a>1.一个Servlet可以指定一个或多个映射路径</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello3<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-一个Servlet可以指定通用映射路径"><a href="#2-一个Servlet可以指定通用映射路径" class="headerlink" title="2.一个Servlet可以指定通用映射路径"></a>2.一个Servlet可以指定通用映射路径</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--通用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="3-可以指定默认请求路径及后缀"><a href="#3-可以指定默认请求路径及后缀" class="headerlink" title="3.可以指定默认请求路径及后缀"></a>3.可以指定默认请求路径及后缀</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--默认请求路径--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--可以自定义后缀实现请求映射</span></span><br><span class="line"><span class="comment">    注意点，*前面不能加项目映射的路径</span></span><br><span class="line"><span class="comment">    hello/xiaotong.howsyc</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.howsyc<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4.优先级:1指定-&gt;2通用-&gt;3默认</p>
<h5 id=""><a href="#" class="headerlink" title=""></a></h5>]]></content>
      <categories>
        <category>javaEE</category>
      </categories>
      <tags>
        <tag>servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>java集合</title>
    <url>/2020/05/13/gather/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>java的具体集合和集合中的接口关系图</p>
<a id="more"></a>
<h3 id="集合常用方法"><a href="#集合常用方法" class="headerlink" title="集合常用方法"></a>集合常用方法</h3><p>add    增加<br>contains    判断是否存在<br>get    获取指定位置的对象<br>indexOf    获取对象所处的位置<br>remove    删除<br>set    替换<br>size    获取大小<br>toArray    转换为数组<br>addAll    把另一个容器所有对象都加进来<br>clear    清空</p>
<h4 id="Collections类"><a href="#Collections类" class="headerlink" title="Collections类"></a>Collections类</h4><p>Collections是一个类，容器的工具类,就如同Arrays是数组的工具类<br>reverse    反转<br>shuffle    混淆<br>sort    排序<br>swap    交换<br>rotate    滚动<br>synchronizedList    线程安全化</p>
<h3 id="集合框架中的接口"><a href="#集合框架中的接口" class="headerlink" title="集合框架中的接口"></a>集合框架中的接口</h3><p><img src="https://ftp.bmp.ovh/imgs/2020/05/06e273f2a35d2ac8.jpg" alt=""><br>Collection是 Set List Queue和 Deque的接口<br>Queue: 先进先出队列<br>Deque: 双向链表</p>
<p>注：Collection和Map之间没有关系，Collection是放一个一个对象的，Map 是放键值对的<br>注：Deque 继承 Queue,间接的继承了 Collection</p>
<p>List 是一个有序集合。元 素 会 增 加 到 容 器 中 的 特 定 位 置 。 可 以 采 用两种方式访问元素 ：</p>
<p>使用迭代器访问，或者使用一个整数索引来访问。<br>后一种方法称为随机访问( random access) , 因为这样可以按任意顺序访问元素。<br>与之不同 ， 使用迭代器访问时 ，必须顺序地访问元素。</p>
<p>Set 接口等同于 Collection 接口,不过其方法的行为有更严谨的定义。集 （ set )的 add 方法不允许增加重复的元素。<br>要适当地定义集的 equals 方法 ： 只要两个集包含同样的元素就认为是相等的，而不要求这些元素有同样的顺序 。</p>
<p>hashCode 方法的定义要保证包含相同元素的两个集会得到相同的散列码。</p>
<p>SortedSet 和 SortedMap 接口会提供用于排序的比较器对象， 这两个接口定义了可以得到集合子集视图的方法。</p>
<p> Java SE 6 引人了接口 NavigableSet 和 NavigableMap ,<br>其中包含一些用于搜索和遍历有序集和映射的方法。(理想情况下,这些方法本应当直接包含在 SortedSet和 SortedMap接口中。)TreeSet 和 TreeMap 类实现了这些接口。</p>
<p>标记接口 RandomAccess：为了避免对链表完成随机访问操作 –Java SE 1.4 引入。</p>
<h3 id="具体的集合"><a href="#具体的集合" class="headerlink" title="具体的集合"></a>具体的集合</h3><p><img src="https://ftp.bmp.ovh/imgs/2020/05/c828167783de519d.jpg" alt=""></p>
<p>ArrayList                                 一种可以动态增长和缩减的索引序列<br>LinkedList            一种可以在任何位置进行高效地插人和删除操作的有序序列<br>ArrayDeque        一种用循环数组实现的双端队列<br>HashSet            一种没有重复元素的无序集合<br>TreeSet            — 种有序集<br>EnumSet            一种包含枚举类型值的集<br>LinkedHashSet        一种可以记住元素插人次序的集<br>PriorityQueue        一种允许高效删除最小元素的集合<br>HashMap            一种存储键 / 值关联的数据结构<br>TreeMap            — 种键值有序排列的映射表<br>EnumMap            一种键值属于枚举类型的映射表<br>LinkedHashMap        一种可以记住键 / 值项添加次序的映射表<br>WeakHashMap        一种其值无用武之地后可以被垃圾回收器回收的映射表<br>IdentityHashMap        一种用 = 而不是用 equals 比较键值的映射表</p>
<p>Hashtable、Vector线程安全的类</p>
<p>本文章参考《core java第十版》与 <a href="https://how2j.cn/p/5752" target="_blank" rel="noopener">how2j</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>较为完整win10程序员计算器使用教程</title>
    <url>/2020/05/28/calc/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>前言：关于win10程序员计算器的使用，如有错误，欢迎指出。版本为10.1910.0.0</p>
<a id="more"></a>
<p>快捷进入win键+R  输入calc</p>
<p>HEX ：十六进制     DEC：十进制        OCT：八进制    BIN：二进制，注意这里的二进制为二进制补码形式<br>每输入一个数，进制转换会自动进行</p>
<p>QWORD：四字（64位）    DWORD：双字（32位）    WORD：字（16位）    BYTE：字节（8位）</p>
<p>CE：清除本次输入        C：清除所有输入，结束计算        MS：内存存储    M：查看内存<br><img src="https://s1.ax1x.com/2020/05/28/tZfqRx.png" alt=""></p>
]]></content>
  </entry>
  <entry>
    <title>java对象流 EOFException异常</title>
    <url>/2020/05/05/EOFException/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>这里描述的java.io.EOFException异常是在对象流（也就是ObjectInputStream，ObjectOutputStream）的使用过程中，抛出的。</p>
<a id="more"></a>
<p>什么是对象流？</p>
<p>对象流指的是可以直接把一个对象以流的形式传输给其他的介质，比如硬盘<br>一个对象以流的形式进行传输，叫做序列化。该对象所对应的类，必须是实现Serializable接口。<a href="https://how2j.cn/p/5689" target="_blank" rel="noopener">详细学习</a></p>
<p>如果你使用使用对象流那么必须配套使用,因为用对象流的方式写人文件，文件的开头会有序列头，就像协议一样，是规定好的。如下是用java写人的Hero对象:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">        序列头     对象                数值</span><br><span class="line">序列头?            Hero        I hpL namet Ljava/lang/String;xp  ht garen</span><br></pre></td></tr></table></figure>
<h3 id="对象流不同于普通的字节流，当对象流中没有数据时，程序却尝试读取异常，会报EOF错误；而字节流就不会出现这种情况，字节流会返回-1-。"><a href="#对象流不同于普通的字节流，当对象流中没有数据时，程序却尝试读取异常，会报EOF错误；而字节流就不会出现这种情况，字节流会返回-1-。" class="headerlink" title="对象流不同于普通的字节流，当对象流中没有数据时，程序却尝试读取异常，会报EOF错误；而字节流就不会出现这种情况，字节流会返回-1 。"></a>对象流不同于普通的字节流，当对象流中没有数据时，程序却尝试读取异常，会报EOF错误；而字节流就不会出现这种情况，字节流会返回-1 。</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 初始化Object流语句</span></span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">FileOututStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">dis = <span class="keyword">new</span> ObjectInputStream(fis); <span class="comment">// 报错的就是这一行，第xx行</span></span><br><span class="line">dos = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line"></span><br><span class="line">java.io.EOFException</span><br><span class="line">	at java.io.ObjectInputStream$PeekInputStream.readFully(ObjectInputStream.java:<span class="number">2681</span>)</span><br><span class="line">	at java.io.ObjectInputStream$BlockDataInputStream.readShort(ObjectInputStream.java:<span class="number">3156</span>)</span><br><span class="line">	at java.io.ObjectInputStream.readStreamHeader(ObjectInputStream.java:<span class="number">862</span>)</span><br><span class="line">	at java.io.ObjectInputStream.&lt;init&gt;(ObjectInputStream.java:<span class="number">358</span>)</span><br><span class="line">	at Test.main(Test.java:xx行) <span class="comment">// 第xx行报错</span></span><br></pre></td></tr></table></figure>
<p>因为ObjectInputStream构造函数会从传入的InputStream来读取数据。首先会读取序列化流的头部(serialization stream header)并验证头部。此构造器会一直地”阻塞”，直到与之对应的ObjectOutputStream写入了序列化头部。(阻塞并不完全正确，详细见<a href="https://blog.csdn.net/qq_37206105/article/details/90461717" target="_blank" rel="noopener">Canliture</a>的文章)，</p>
<p>所以我们先实例化ObjectOutputStream，再实例化 ObjectInputStream，保证在在同一资源的对象流ObjectInputStream能够及时读取到序列化头而不至于阻塞或者引发EOF异常(阻塞对应于Socket IO，EOF异常对应于文件IO)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dos = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">dis = <span class="keyword">new</span> ObjectInputStream(fis);</span><br></pre></td></tr></table></figure>



<h3 id="ObjectInputStream写入的数据，在ObjectOutputStream上读取时，应该按照相同的数据类型依次读取，否则数据类型不等会抛出EOFException"><a href="#ObjectInputStream写入的数据，在ObjectOutputStream上读取时，应该按照相同的数据类型依次读取，否则数据类型不等会抛出EOFException" class="headerlink" title="ObjectInputStream写入的数据，在ObjectOutputStream上读取时，应该按照相同的数据类型依次读取，否则数据类型不等会抛出EOFException"></a>ObjectInputStream写入的数据，在ObjectOutputStream上读取时，应该按照相同的数据类型依次读取，否则数据类型不等会抛出EOFException</h3><p>下文的错误把dis.readInt() 改为 dis.readObject()就能解决</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"> File f0 = <span class="keyword">new</span> File(<span class="string">"kkk.out"</span>);</span><br><span class="line"> FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line"> FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line"> ObjectInputStream dis = <span class="keyword">null</span>;</span><br><span class="line"> ObjectOutputStream dos = <span class="keyword">null</span>;</span><br><span class="line"> <span class="keyword">try</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(!f0.exists())f0.createNewFile();</span><br><span class="line"></span><br><span class="line">     fos = <span class="keyword">new</span> FileOutputStream(f0);</span><br><span class="line">     fis = <span class="keyword">new</span> FileInputStream(f0);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 1. 初始化Object流语句</span></span><br><span class="line">     dis = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line">     dos = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 2. 写"对象"语句</span></span><br><span class="line">     dos.writeInt(<span class="number">1</span>);                             <span class="comment">//异常处</span></span><br><span class="line">     dos.writeObject(<span class="keyword">new</span> Integer(<span class="number">3</span>));         </span><br><span class="line"></span><br><span class="line">     <span class="comment">// 3. 读取，输出语句</span></span><br><span class="line">     System.out.println(dis.readInt() + <span class="string">","</span>+ dis.readInt());</span><br><span class="line"> &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">     e.printStackTrace();</span><br><span class="line">     <span class="keyword">if</span>(fos != <span class="keyword">null</span>) fos.close();</span><br><span class="line">     <span class="keyword">if</span>(fis != <span class="keyword">null</span>) fis.close();</span><br><span class="line">     <span class="keyword">if</span>(dos != <span class="keyword">null</span>) dos.close();</span><br><span class="line">     <span class="keyword">if</span>(dis != <span class="keyword">null</span>) dis.close();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>1.对象流不同于普通的字节流，当对象流中没有数据时，程序却尝试读取数据，会报EOFException；而字节流就不会出现这种情况，字节流会返回-1</p>
<p>2.ObjectInputStream写入的数据，在ObjectOutputStream上读取时，应该按照相同的数据类型依次读取，否则数据类型不等会抛出EOFException</p>
<p>3.最好在实际使用的过程中，我们先实例化ObjectOutputStream，再实例化 ObjectInputStream，这是由这两个类的设计思想所决定的。如此能保证在同一资源的对象流ObjectInputStream能够及时读取到序列化头而不至于阻塞或者引发EOF异常(阻塞对应于Socket IO，EOF异常对应于文件IO)</p>
<p>如果想从源码上了解问题请点击下放的原文链接</p>
<p>原文链接：<a href="https://blog.csdn.net/qq_37206105/article/details/90461717" target="_blank" rel="noopener">Canliture</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo的使用</title>
    <url>/2020/04/24/hexo-%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>记录一些我学到hexo命令</p>
<a id="more"></a>
<h2 id="Hexo学到的东西"><a href="#Hexo学到的东西" class="headerlink" title="Hexo学到的东西"></a>Hexo学到的东西</h2><h3 id="hexo命令1-本地部署"><a href="#hexo命令1-本地部署" class="headerlink" title="hexo命令1-本地部署"></a>hexo命令1-本地部署</h3><pre><code class="bash">$ hexo init &lt;folder&gt; <span class="comment">#init是初始化一个hexo文件夹</span></code></pre>
<pre><code class="bash">$ <span class="built_in">cd</span> &lt;folder&gt;  <span class="comment">#注意一定要打开文件夹才能进行部署</span></code></pre>
<pre><code class="bash">$ npm install    <span class="comment">#部署之前进行安装</span></code></pre>
<pre><code class="bash">$ hexo g   <span class="comment">#生成静态网页</span></code></pre>
<pre><code class="bash">$ hexo s      <span class="comment">#启动服务器 启动之后会默认给一个网址进去就是我们部署的网页了</span></code></pre>
<h3 id="更换hexo主题"><a href="#更换hexo主题" class="headerlink" title="更换hexo主题"></a>更换hexo主题</h3><pre><code class="bash"> 把你想更换的主题放在themes目录下。官网有很多好看的主题：https://hexo.io/themes/

 然后修改站点目录下的_config.yml配置文件找到themes: landscape(默认主题)

修改成你在themes下放好的主题，就完成了</code></pre>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>cos对象存储拒绝访问解决方法（腾讯云）</title>
    <url>/2020/04/25/cosnew/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>昨天一直在图床的测试，然后访问的时候一直提示Access Denied，emmm我太菜了。当时因为我看不懂英HHHHH。直接百度了.cors跨域访问也设置了,访问权限公有读也设置了,为什么还不能访问呢？</p>
<a id="more"></a>
<p><img src="https://tuchuang-1301263664.cos.ap-nanjing.myqcloud.com/cos%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/1.jpg" alt="Images text"><br><img src="https://tuchuang-1301263664.cos.ap-nanjing.myqcloud.com/cos%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/2.jpg" alt="Images text"><br><img src="https://tuchuang-1301263664.cos.ap-nanjing.myqcloud.com/cos%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/3.jpg" alt="images text"></p>
<p>经过广大的网友大佬们的帮助找到了问题1如果你没有在基础配置里设置防盗链,或者权限里面设置Policy权限,访问对象链接就会报错Access Denied,没有权限。设置方法可以官网给的提示。<br><img src="https://tuchuang-1301263664.cos.ap-nanjing.myqcloud.com/cos%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/4.jpg" alt="image text"><br><img src="https://tuchuang-1301263664.cos.ap-nanjing.myqcloud.com/cos%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/5.jpg" alt="image text"></p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>cos</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo添加rss订阅功能</title>
    <url>/2020/04/24/hexo%E6%B7%BB%E5%8A%A0rss%E8%AE%A2%E9%98%85%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>hexo如何添加rss功能呢？</p>
<a id="more"></a>
<h3 id="rss包"><a href="#rss包" class="headerlink" title="rss包"></a>rss包</h3><p>在hexojs下有一个hexo-generator-feed的npm包,用来实现订阅功能<br>首先安装这个包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed</span><br></pre></td></tr></table></figure>
<p>安装成功后在themes的主题配置文件_config.yml下配置该插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">feed:</span><br><span class="line">    <span class="built_in">type</span>: atom</span><br><span class="line">    path: atom.xml</span><br><span class="line">    <span class="built_in">limit</span>: 20</span><br><span class="line">    hub:</span><br><span class="line">    content:</span><br><span class="line">    content_limit:</span><br><span class="line">    content_limit_delim: <span class="string">' '</span></span><br></pre></td></tr></table></figure>
<p>参数的含义：</p>
<p>type: RSS的类型(atom/rss2)</p>
<p>path: 文件路径,默认是atom.xml/rss2.xml</p>
<p>limit: 展示文章的数量,使用0或则false代表展示全部</p>
<p>hub:</p>
<p>content: 在RSS文件中是否包含内容 ,有3个值 true/false默认不填为false</p>
<p>content_limit: 指定内容的长度作为摘要,仅仅在上面content设置为false和没有自定义的描述出现<br>content_limit_delim: 上面截取描述的分隔符,截取内容是以指定的这个分隔符作为截取结束的标志.在达到规定的内容长度之前最后出现的这个分隔符之前的内容,，防止从中间截断.</p>
<h5 id="如果是next主题可以实现另一种方法："><a href="#如果是next主题可以实现另一种方法：" class="headerlink" title="如果是next主题可以实现另一种方法："></a>如果是next主题可以实现另一种方法：</h5><p>在主题的config.yml文件下找到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rss:</span><br></pre></td></tr></table></figure>
<p>直接设置为true就可以了</p>
<p>配置完成后直接在根目录下运行hexo g<br>就会在你博客的pubilc 文件夹下发现atom.xml文件了</p>
<p>参考文章：<a href="https://blog.csdn.net/weixin_34292287/article/details/88931060" target="_blank" rel="noopener">https://blog.csdn.net/weixin_34292287/article/details/88931060</a></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>java个人笔记</title>
    <url>/2020/05/07/java-notes/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>前言：学完就忘怎么办？复习呗，qaq。本文章是我个人对javase基础的复习（汗）,一天复习一点点，奥利给！</p>
<a id="more"></a>
<h2 id="与equals的区别"><a href="#与equals的区别" class="headerlink" title="==与equals的区别"></a>==与equals的区别</h2><p>This article is written in 2020-5-7.</p>
<h3 id="在Object类下（普通类）-和equals并没有什么区别，都是判断是否是同一个对象。"><a href="#在Object类下（普通类）-和equals并没有什么区别，都是判断是否是同一个对象。" class="headerlink" title="在Object类下（普通类）,==和equals并没有什么区别，都是判断是否是同一个对象。"></a>在Object类下（普通类）,==和equals并没有什么区别，都是判断是否是同一个对象。</h3><p>举例:   可以看得来==和equals并没有什么区别。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">        Test t1 = <span class="keyword">new</span> Test(<span class="string">"好"</span>);</span><br><span class="line">        Test t2 = t1;     <span class="comment">//将t2指向t1,使t2和t1指向同一个对象</span></span><br><span class="line">        Test t3 = <span class="keyword">new</span> Test(<span class="string">"好"</span>); <span class="comment">//t3指向一个新的对象</span></span><br><span class="line">        <span class="comment">//虽然t1和t3的内容相同，但是并不是一个对象。所以打印结果为：false;</span></span><br><span class="line">        System.out.println(<span class="string">"==:  t1和t2是否同一个对象："</span>+t1==t2);</span><br><span class="line">        System.out.println(<span class="string">"==:  t1和t3是否同一个对象："</span>+t1==t3);</span><br><span class="line">        System.out.println(<span class="string">"equals:   t1和t2是否同一个对象："</span>+t1.equals(t2));</span><br><span class="line">        System.out.println(<span class="string">"equals    1和t3是否同一个对象："</span>+t1.equals.(t3));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">控制台输出结果为：</span><br><span class="line">==:  t1和t2是否同一个对象：<span class="keyword">true</span></span><br><span class="line">==:  t1和t3是否同一个对象：<span class="keyword">false</span></span><br><span class="line">equals:   t1和t2是否同一个对象：<span class="keyword">true</span></span><br><span class="line">equals    <span class="number">1</span>和t3是否同一个对象：<span class="keyword">false</span></span><br></pre></td></tr></table></figure>
<p>当然你也可以使用==来判断对象的值(内容)是否相同。如上例的t1.name和t3.name是否相同 判断结果肯定是true。</p>
<h3 id="String类中-对equals方法进行了重写。使得equals方法可以用于判断内容是否相同。而-用于判断是否同一个对象-有个特性-。"><a href="#String类中-对equals方法进行了重写。使得equals方法可以用于判断内容是否相同。而-用于判断是否同一个对象-有个特性-。" class="headerlink" title="String类中,对equals方法进行了重写。使得equals方法可以用于判断内容是否相同。而==用于判断是否同一个对象(有个特性)。"></a>String类中,对equals方法进行了重写。使得equals方法可以用于判断内容是否相同。而==用于判断是否同一个对象(有个特性)。</h3><p>如下例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">	    String a =<span class="string">"嘿嘿"</span>;</span><br><span class="line">	    String b =<span class="string">"嘿嘿"</span>;</span><br><span class="line">	    String c = <span class="keyword">new</span> String(a);</span><br><span class="line">	    System.out.println(a==b);<span class="comment">//打印结果为：true</span></span><br><span class="line">	    System.out.println(a==c);<span class="comment">//打印结果为：false</span></span><br><span class="line">	    System.out.println(a.equals(c));<span class="comment">//打印结果为：true</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="特性："><a href="#特性：" class="headerlink" title="特性："></a>特性：</h5><p>在引用a和引用b里，字符串的字面值相同。在第六行中使用==判断结果为true，</p>
<p>是因为一般说来，编译器每碰到一个字符串的字面值，就会创建一个新的对象<br>所以在第3行会创建了一个新的字符串”嘿嘿”,</p>
<p>但是在第4行，编译器发现已经存在现成的”嘿嘿”，那么就直接拿来使用，而没有进行重复创建。（这里可以将字面值当为一个对象理解）</p>
<p>然而第5行虽然字面值和引用a,b相同，但是已经指向了一个新的对象，所以第7行判断结果为false。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>本站换域名啦(公告)</title>
    <url>/2020/04/27/howsyc/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本站已换成howsyc.cn的新域名,how=好，syc=四叶草,象征着幸运,总得来说=好幸运。就是进入本站的朋友们都会被幸运女神保佑，气运十足，如果是学生考试加分等，如果是工作者一切顺利，早日涨薪，如果…..emmm编不下去了(滑稽)。祝每一位来到本站的朋友幸福快乐！旧域名mykindle.xyz点击后会自动跳转到新域名,换域名是因为听说小姨子后缀百度收录不太好，所以就直接换了,菜鸡小站希望以后有点收录，感谢来访的朋友们，呜呜呜底部的底部的访客数清空了。</p>
]]></content>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>控制语句</title>
    <url>/2020/04/24/java%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>控制语句在基础中还是比较重要，还带那么一点有趣</p>
<a id="more"></a>
<h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><h3 id="选择结构："><a href="#选择结构：" class="headerlink" title="选择结构："></a>选择结构：</h3><p>if单选泽结构<br>if-else 双选择结构<br>if-else if - else多选择结构<br>switch结构</p>
<h3 id="循环结构："><a href="#循环结构：" class="headerlink" title="循环结构："></a>循环结构：</h3><p>while循环<br>do-while循环（先执行再判断，为true继续执行，否则停止）<br>for循环（初始化声明的变量作用域为整个for循环体内，在循环体外无法访问）<br>嵌套循环（  在一个循环语句内部再嵌套一个或多个循环，称为嵌套循环。<br>while、do-while与for循环可以任意嵌套多层。）<br>break和continue语句<br>带标签的break和continue</p>
<h3 id="下面是几个控制语句的例题"><a href="#下面是几个控制语句的例题" class="headerlink" title="下面是几个控制语句的例题"></a>下面是几个控制语句的例题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* 复利公式：</span><br><span class="line">F = p* ( (<span class="number">1</span>+r)^n );</span><br><span class="line">F 最终收入 p 本金 r 年利率 n 存了多少年</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Millionaire</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> p = <span class="number">1000</span>,n;</span><br><span class="line">		<span class="keyword">float</span> r = <span class="number">0.2F</span>;</span><br><span class="line">		<span class="keyword">int</span> F=<span class="number">0</span>  ;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; F&lt;=<span class="number">100000</span>; i++) &#123;</span><br><span class="line">			F=(<span class="keyword">int</span>) (p*((r/<span class="number">12</span>)+<span class="number">1</span>));</span><br><span class="line">			p+=<span class="number">1000</span>;</span><br><span class="line">			<span class="keyword">if</span> (F&gt;=<span class="number">100000</span>) &#123;</span><br><span class="line">				n=i/<span class="number">12</span>;</span><br><span class="line">				System.out.println(n);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* 黄金分割点：</span><br><span class="line"> * 寻找某两个数相除，其结果 离黄金分割点 <span class="number">0.618</span>最近</span><br><span class="line">分母和分子不能同时为偶数</span><br><span class="line">分母和分子 取值范围在[<span class="number">1</span>-<span class="number">20</span>]</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoldSenectionRatio</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 寻找某两个数相除，其结果 离黄金分割点 0.618最近</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// 分母和分子不能同时为偶数</span></span><br><span class="line">        <span class="comment">// 分母和分子 取值范围在[1-20]</span></span><br><span class="line">        <span class="keyword">int</span> range = <span class="number">20</span>; <span class="comment">// 取值范围</span></span><br><span class="line">        <span class="keyword">float</span> breakPoint = <span class="number">0.618f</span>; <span class="comment">// 黄金分割点</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">float</span> minDiff = <span class="number">100</span>; <span class="comment">// 离黄金分割点的差值</span></span><br><span class="line">        <span class="keyword">int</span> answerFenzi = <span class="number">0</span>; <span class="comment">// 找到的分子</span></span><br><span class="line">        <span class="keyword">int</span> answerFenmu = <span class="number">0</span>; <span class="comment">// 找到的分母</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> fenzi = <span class="number">1</span>; fenzi &lt;= range; fenzi++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> fenmu = <span class="number">1</span>; fenmu &lt;= range; fenmu++) &#123;</span><br><span class="line">                <span class="comment">// 分母和分子不能同时为偶数</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="number">0</span> == fenzi % <span class="number">2</span> &amp; <span class="number">0</span> == fenmu % <span class="number">2</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// 取值</span></span><br><span class="line">                <span class="keyword">float</span> value = (<span class="keyword">float</span>) fenzi / fenmu;</span><br><span class="line">                <span class="comment">// 取离黄金分割点的差值</span></span><br><span class="line">                <span class="keyword">float</span> diff = value - breakPoint;</span><br><span class="line">                <span class="comment">// 绝对值</span></span><br><span class="line">                diff = diff &lt; <span class="number">0</span> ? <span class="number">0</span> - diff : diff;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//                 找出最小的差值</span></span><br><span class="line">                <span class="keyword">if</span> (diff &lt; minDiff) &#123;</span><br><span class="line">                    minDiff = diff;</span><br><span class="line">                    answerFenzi = fenzi;</span><br><span class="line">                    answerFenmu = fenmu;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        System.out.println(<span class="string">"离黄金分割点("</span> + breakPoint + <span class="string">")最近的两个数相除是:"</span> + answerFenzi + <span class="string">"/"</span> + answerFenmu + <span class="string">"="</span></span><br><span class="line">                + ((<span class="keyword">float</span>) answerFenzi / answerFenmu));</span><br><span class="line"> </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/*计算数的阶乘*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factorial</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		 Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">	        System.out.println(<span class="string">"请输入一个整数："</span>);</span><br><span class="line">	        <span class="keyword">int</span> n = s.nextInt();</span><br><span class="line">	        <span class="keyword">int</span> fac = <span class="number">1</span>;</span><br><span class="line">	        <span class="keyword">while</span>(n&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">	            fac *=n;</span><br><span class="line">	            n--;</span><br><span class="line">	        &#125;</span><br><span class="line">	        System.out.println(<span class="string">"阶乘是:"</span> + fac);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*水仙花数定义：</span></span><br><span class="line"><span class="comment">1. 一定是3位数</span></span><br><span class="line"><span class="comment">2. 每一位的立方，加起来恰好是这个数本身，比如153=1*1*1+5*5*5+3*3*3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Daffodil</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> daffodil;</span><br><span class="line">		System.out.println(<span class="string">"打印所有的水仙花数："</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; <span class="number">10</span>; a++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt; <span class="number">10</span>; b++) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; <span class="number">10</span>; c++) &#123;</span><br><span class="line">					<span class="keyword">if</span> (a*<span class="number">100</span>+b*<span class="number">10</span>+c == (a*a*a)+(b*b*b)+(c*c*c)&amp;&amp;a*<span class="number">100</span>+b*<span class="number">10</span>+c&gt;<span class="number">99</span>) &#123;</span><br><span class="line">						daffodil =a*<span class="number">100</span>+b*<span class="number">10</span>+c;</span><br><span class="line">						System.out.println(daffodil);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://how2j.cn/p/5504" target="_blank" rel="noopener">例题来源</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java数据类型</title>
    <url>/2020/04/24/java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>java的数据类型可分为两大类：<br>基本数据类型（primitive data type）和引用数据类型（referece data type)</p>
<a id="more"></a>
<h3 id="基本数据类型（primitive-data-type）："><a href="#基本数据类型（primitive-data-type）：" class="headerlink" title="基本数据类型（primitive data type）："></a>基本数据类型（primitive data type）：</h3><p>-整数类型（byte short int long）<br>型(java语言的整型常数默认为int型，声明long型常量可以后加 ‘l’或’L’)<br>浮点类型(float double)<br>字符型（char）<br>布尔型(boolean)        </p>
<h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><p>类（class）(String是引用类型)<br>接口(interface)<br>数组</p>
<p>$ //引用数据类型的大小统一为4个字节,记录的是其引用对象的地址</p>
<table>
<thead>
<tr>
<th>类型</th>
<th align="left">占用存储空间</th>
<th align="center">表示范围</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td align="left">1字节</td>
<td align="center">（=8位=2⑻=256字）    -2⑺ ~ 2⑺-1  （-128~127)</td>
</tr>
<tr>
<td>short</td>
<td align="left">2字节</td>
<td align="center">-2⒂ ~ 2⒂-1      (-32768~32767)</td>
</tr>
<tr>
<td>int</td>
<td align="left">4字节</td>
<td align="center">-2<em>(31幂)~2</em>(31幂)（ -2127283648~2147483647）（约21亿）</td>
</tr>
<tr>
<td>long</td>
<td align="left">8字节</td>
<td align="center">-2<em>(63) ~ 2</em>(63)-1</td>
</tr>
<tr>
<td>char</td>
<td align="left">2字节</td>
<td align="center"></td>
</tr>
<tr>
<td>boolean</td>
<td align="left">1位</td>
<td align="center"></td>
</tr>
<tr>
<td>float</td>
<td align="left">4字节</td>
<td align="center"></td>
</tr>
<tr>
<td>double</td>
<td align="left">8字节</td>
<td align="center"></td>
</tr>
</tbody></table>
<p> 基本数据类型的类型转换可分为：<br>自动类型转换：容量小的数据类型可以自动转换为容量大的数据类型<br>强制类型转换：用于显式的转换一个数值的类型，语法格式：(type)var</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java数组</title>
    <url>/2020/04/24/java%E6%95%B0%E7%BB%84%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>数组，以及Arrays.方法的使用</p>
<a id="more"></a>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="创建数组的时候，要指明数组的长度。"><a href="#创建数组的时候，要指明数组的长度。" class="headerlink" title="创建数组的时候，要指明数组的长度。"></a>创建数组的时候，要指明数组的长度。</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int a [ ] = new int[5] ; //分配了长度是5的数组，但是没有赋值</span><br><span class="line">a[4]=100; //下标4，实质上是“第5个”，即最后一个</span><br><span class="line">a[5]=101; //下标5，实质上是“第6个”，超出范围 ,产生数组下标越界异</span><br><span class="line"></span><br><span class="line">int[] a = new int[]&#123;100,102,444,836,3236&#125;;//写法一: 分配空间同时赋值</span><br><span class="line">int[] b = &#123;100,102,444,836,3236&#125;;//写法二： 省略了new int[],效果一样</span><br><span class="line"></span><br><span class="line">//写法三：同时分配空间，和指定内容</span><br><span class="line">//在这个例子里，长度是3，内容是5个，产生矛盾了</span><br><span class="line">//所以如果指定了数组的内容，就不能同时设置数组的长度</span><br><span class="line"> int[] c = new int[3]&#123;100,102,444,836,3236&#125;;</span><br></pre></td></tr></table></figure>


<h3 id="引用概念："><a href="#引用概念：" class="headerlink" title="引用概念："></a>引用概念：</h3><p>如果变量代表一个数组，比如a,我们把a叫做引用<br>与基本类型不同 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int c &#x3D; 5; 这叫给c赋值为5 </span><br><span class="line">声明一个引用 int[] a; </span><br><span class="line">a &#x3D; new int[5]; </span><br><span class="line">让a这个引用，指向数组</span><br><span class="line">常</span><br></pre></td></tr></table></figure>

<h3 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h3><p>选择法排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a.length-<span class="number">1</span>; j++) &#123;<span class="comment">//外层循环一次，</span></span><br><span class="line">因为最后一次剩下的就是最大的所以循环次数-<span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = j+<span class="number">1</span>; i &lt; a.length; i++) &#123;<span class="comment">//内层会全部循环一次</span></span><br><span class="line">    <span class="keyword">if</span>(a[i]&lt;a[j])&#123; <span class="comment">//如果然后的数小于前面的就换位 </span></span><br><span class="line">      <span class="keyword">int</span> temp = a[j];</span><br><span class="line">     a[j] = a[i];</span><br><span class="line">     a[i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>冒泡法排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a.length; j++) &#123;<span class="comment">//</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length-j-<span class="number">1</span>; i++) &#123;<span class="comment">//-1防止数组下标越界</span></span><br><span class="line"><span class="comment">//-j是因为每内循环一次，最大的就放在后面了，就不需要比较了</span></span><br><span class="line">    <span class="keyword">if</span>(a[i]&gt;a[i+<span class="number">1</span>])&#123; <span class="comment">//如果前面的大于后面的就互换 </span></span><br><span class="line">     <span class="keyword">int</span> temp = a[i];</span><br><span class="line">     a[i] = a[i+<span class="number">1</span>];</span><br><span class="line">     a[i+<span class="number">1</span>] = temp;</span><br><span class="line">              &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="增强型for循环遍历"><a href="#增强型for循环遍历" class="headerlink" title="增强型for循环遍历"></a>增强型for循环遍历</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> [] values = <span class="keyword">new</span> <span class="keyword">int</span>[];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> each : values) &#123;</span><br><span class="line">   System.out.println(each);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="复制数组："><a href="#复制数组：" class="headerlink" title="复制数组："></a>复制数组：</h3><p>把一个数组的值，复制到另一个数组中<br>System.arraycopy(src, srcPos, dest, destPos, length)<br>src: 源数组<br>srcPos: 从源数组复制数据的起始位置<br>dest: 目标数组<br>destPos: 复制到目标数组的起始位置<br>length: 复制的长度</p>
<p>这是一个二维数组，里面的每一个元素，都是一个一维数组<br>所以二维数组又叫数组的数组<br>int b[][] = new int[][]{<br>   {1,2,3},<br>   {4,5,6},<br>   {7,8,9}<br>};</p>
<h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><p>Arrays是针对数组的工具类，可以进行 排序，查找，复制填充等功能。 大大提高了开发人员的工作效率。</p>
<h3 id="copyOfRange-数组复制"><a href="#copyOfRange-数组复制" class="headerlink" title="copyOfRange    数组复制"></a>copyOfRange    数组复制</h3><p>与使用System.arraycopy进行数组复制类似的，Arrays提供了一个copyOfRange方法进行数组复制。<br>// copyOfRange(int[] original, int from, int to)<br>// 第一个参数表示源数组<br>// 第二个参数表示开始位置(取得到)<br>// 第三个参数表示结束位置(取不到)</p>
<h3 id="toString-转换为字符串"><a href="#toString-转换为字符串" class="headerlink" title="toString()    转换为字符串"></a>toString()    转换为字符串</h3><p>//int a[] = new int[] { 18, 62, 68, 82, 65, 9 };<br> //String content = Arrays.toString(a);<br>sort    排序<br>在前面章节学习了 选择法排序 和 冒泡法排序，Arrays工具类提供了一个sort方法，只需要一行代码即可完成排序功能。</p>
<h3 id="Arrays-sort-a"><a href="#Arrays-sort-a" class="headerlink" title="Arrays.sort(a);"></a>Arrays.sort(a);</h3><p>binarySearch    搜索<br>//使用binarySearch之前，必须先使用sort进行排序<br>//如果数组中有多个相同的元素，查找的结果是不确定的<br>int a[] = new int[] { 18, 62, 68, 82, 65, 9 };<br>Arrays.sort(a);<br>System.out.println(“数字 62出现的位置:”+Arrays.binarySearch(a, 62));</p>
<h3 id="equals-判断是否相同"><a href="#equals-判断是否相同" class="headerlink" title="equals    判断是否相同"></a>equals    判断是否相同</h3><p>//比较两个数组的内容是否一样<br>System.out.println(Arrays.equals(a, b));</p>
<h3 id="fill-填充"><a href="#fill-填充" class="headerlink" title="fill    填充"></a>fill    填充</h3><p>//使用同一个值，填充整个数组<br>int a[] = new int[10];<br>Arrays.fill(a, 5);</p>
<h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 练习-二维数组排序</span></span><br><span class="line"><span class="comment"> * 首先定义一个5*8的二维数组，然后使用随机数填充满</span></span><br><span class="line"><span class="comment"> * 借助Arrays的方法对二维数组进行排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise_TwoDimensionSort</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> a[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>][<span class="number">8</span>];</span><br><span class="line">		<span class="keyword">int</span> []b = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">40</span>];<span class="comment">//这里必须赋值</span></span><br><span class="line"><span class="comment">//		int b = (int)(Math.random()*100);</span></span><br><span class="line"><span class="comment">//		Arrays.fill(a, b);  二维不能填充；</span></span><br><span class="line">		System.out.println(<span class="string">"排序前："</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;<span class="number">8</span>; j++) &#123;</span><br><span class="line">				a[i][j] =(<span class="keyword">int</span>)(Math.random()*<span class="number">100</span>);<span class="comment">//给二维数组赋值；</span></span><br><span class="line">				System.out.print(+a[i][j]+<span class="string">"\t"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">			</span><br><span class="line">			System.arraycopy(a[i], <span class="number">0</span>, b, i*<span class="number">8</span>, a[i].length);</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		Arrays.sort(b);</span><br><span class="line">		System.out.println(<span class="string">"排序后："</span>+Arrays.toString(b));</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">			System.arraycopy(b, i*<span class="number">8</span>, a[i],<span class="number">0</span>,<span class="number">8</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"新的二维数组："</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">				System.out.print(a[i][j]+<span class="string">"\t"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://how2j.cn/p/5505" target="_blank" rel="noopener">原文来源</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>在jsp中使用include指令引用html页面乱码处理方式</title>
    <url>/2020/11/16/jspIncludeEncoding/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="1、将HTML页面，换成JSP页面，更改编码模式与Tomcat编码模式一致。"><a href="#1、将HTML页面，换成JSP页面，更改编码模式与Tomcat编码模式一致。" class="headerlink" title="1、将HTML页面，换成JSP页面，更改编码模式与Tomcat编码模式一致。"></a>1、将HTML页面，换成JSP页面，更改编码模式与Tomcat编码模式一致。</h3><a id="more"></a>
<h3 id="2、在html文件的html的head标签或者jsp下加入这行代码"><a href="#2、在html文件的html的head标签或者jsp下加入这行代码" class="headerlink" title="2、在html文件的html的head标签或者jsp下加入这行代码"></a>2、在html文件的html的head标签或者jsp下加入这行代码</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">	&lt;%<span class="meta">@page</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">``</span><br><span class="line">pageEncoding是jsp文件本身的编码，是指定web容器将jsp编译成java文件时采用什么编码读取jsp文件。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 3、还有一种方法就是在web.xml中去统一配置pageEncoding的编码,在web-app标签里添加如下配置：</span><br><span class="line">```xml</span><br><span class="line">&lt;jsp-config&gt;</span><br><span class="line">	&lt;jsp-property-group&gt;</span><br><span class="line">		&lt;description&gt;html encoding&lt;/description&gt;</span><br><span class="line">		&lt;display-name&gt;JSPConfiguration&lt;/display-name&gt;</span><br><span class="line">		&lt;url-pattern&gt;*.html&lt;/url-pattern&gt;</span><br><span class="line">		&lt;el-ignored&gt;true&lt;/el-ignored&gt;</span><br><span class="line">		&lt;page-encoding&gt;UTF-8&lt;/page-encoding&gt;</span><br><span class="line">		&lt;scripting-invalid&gt;false&lt;/scripting-invalid&gt;</span><br><span class="line">		&lt;include-prelude&gt;&lt;/include-prelude&gt;</span><br><span class="line">		&lt;include-coda&gt;&lt;/include-coda&gt;</span><br><span class="line">	&lt;/jsp-property-group&gt;</span><br><span class="line">&lt;/jsp-config&gt;</span><br></pre></td></tr></table></figure>
<p>以上三种是在网络搜索到的解决方法:</p>
<p>如果你是使用jsp标签引入的html界面的话建议使用第一种方法。因为jsp标签引入文件属于拼接页面，都是独立的，所有第二种方法的设置无效，第三种测试一下报500错误。<br>jsp指令的：&lt;%@ nclude file=””%&gt; 建议使用第二和第三种方法。不能一起使用会冲突。</p>
<p>感谢博主提供的宝贵经验：<a href="https://blog.csdn.net/yan245294305/article/details/83623123" target="_blank" rel="noopener">https://blog.csdn.net/yan245294305/article/details/83623123</a><br>    <a href="https://www.cnblogs.com/xiaobudong/p/7203933.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaobudong/p/7203933.html</a></p>
]]></content>
      <categories>
        <category>javaEEE</category>
      </categories>
      <tags>
        <tag>jsp</tag>
      </tags>
  </entry>
  <entry>
    <title>idea搭建maven中遇到的错误</title>
    <url>/2020/08/21/mavenbuilderro/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Maven项目架构管理工具：<br>Maven的核心思想：<strong>约定大于配置</strong>,有约束，不要去违反。(来自狂神老师的教导)<br>下面是我在 idea搭建maven中遇到的错误,可以还有错误忘记写了，不是很全面请见谅。</p>
<a id="more"></a>
<h3 id="maven默认web项目中的web-xml版本问题"><a href="#maven默认web项目中的web-xml版本问题" class="headerlink" title="maven默认web项目中的web.xml版本问题"></a>maven默认web项目中的web.xml版本问题</h3><p>   1.1问题：和启动tomcat版本冲突<br>   1.2解决方法：替换为tomcat的版本<br><img src="https://ftp.bmp.ovh/imgs/2020/08/88084f42b60aff28.png" alt=""></p>
<h3 id="Error-java-Compliation-falied-internal-java-compiler-error-或无效的项目发行版本-13"><a href="#Error-java-Compliation-falied-internal-java-compiler-error-或无效的项目发行版本-13" class="headerlink" title="Error:java:Compliation falied:internal java compiler error.或无效的项目发行版本:13"></a>Error:java:Compliation falied:internal java compiler error.或无效的项目发行版本:13</h3><p>解决方法：项目的和文件里的冲突了 改成一样的就好了<br>路径：Settings-&gt;Build,Execution,Deployment-&gt;Compiler-&gt;Java Compiler<br><img src="https://ftp.bmp.ovh/imgs/2020/08/721c99808cdab0ad.png" alt="compiler"></p>
<h3 id="警告：No-archetype-found-in-remote-catalog-Defaulting-to-internal-catalog"><a href="#警告：No-archetype-found-in-remote-catalog-Defaulting-to-internal-catalog" class="headerlink" title="警告：No archetype found in remote catalog. Defaulting to internal catalog."></a>警告：No archetype found in remote catalog. Defaulting to internal catalog.</h3><pre><code>解决方法：https://blog.csdn.net/AdminGuan/article/details/103216314</code></pre><h3 id="报错Cannot-resolve-plugin-org-apache-maven-plugins-maven-compiler-plugin-3-1"><a href="#报错Cannot-resolve-plugin-org-apache-maven-plugins-maven-compiler-plugin-3-1" class="headerlink" title="报错Cannot resolve plugin org.apache.maven.plugins:maven-compiler-plugin:3.1"></a>报错Cannot resolve plugin org.apache.maven.plugins:maven-compiler-plugin:3.1</h3><pre><code>报错原因：本地maven的配置文件和仓库地址不一致
解决方法：注意选择自己的maven版本，将下面图中的override勾选，然后选择自己电脑本地的Maven配置文件和本地maven的仓库地址</code></pre><p><img src="https://ftp.bmp.ovh/imgs/2020/08/5e4ccaed2168a3d9.png" alt="maven仓库配置"></p>
<h3 id="IDEA中每次都要重复配置Maven"><a href="#IDEA中每次都要重复配置Maven" class="headerlink" title="IDEA中每次都要重复配置Maven"></a>IDEA中每次都要重复配置Maven</h3><p>解决方法：在IDEA中的全局默认配置中去配置<br>在左上角new那里的close project关闭项目，之后打开右下角的configure-&gt;Settings<br><img src="https://ftp.bmp.ovh/imgs/2020/08/75abf55bd8d62b0a.png" alt=""><br>找到Maven的仓库配置，注意选择自己的maven版本，将下面图中的override勾选，然后选择自己电脑本地的Maven配置文件和本地maven的仓库地址<br><img src="https://ftp.bmp.ovh/imgs/2020/08/3dfae78226506764.png" alt=""></p>
<h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><p>1.maven的pom.xml配置文件记得jdk版本改成你使用的版本(推荐1.8)</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</span><br><span class="line">    &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br></pre></td></tr></table></figure>

<p>参考文章：<br><a href="https://blog.csdn.net/qq_45309297/article/details/106436535" target="_blank" rel="noopener">https://blog.csdn.net/qq_45309297/article/details/106436535</a><br><a href="https://blog.csdn.net/AdminGuan/article/details/103216314" target="_blank" rel="noopener">https://blog.csdn.net/AdminGuan/article/details/103216314</a><br><a href="https://blog.csdn.net/AdminGuan/article/details/103216314" target="_blank" rel="noopener">https://blog.csdn.net/AdminGuan/article/details/103216314</a><br><a href="https://blog.csdn.net/weixin_42030357/article/details/92097971" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42030357/article/details/92097971</a><br><a href="https://www.cnblogs.com/loufangcheng/p/12861762.html" target="_blank" rel="noopener">https://www.cnblogs.com/loufangcheng/p/12861762.html</a></p>
]]></content>
      <categories>
        <category>javaEE</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>java运算符的优先级</title>
    <url>/2020/04/24/java%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>java运算符的优先级</p>
<a id="more"></a>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><table>
<thead>
<tr>
<th>优先级</th>
<th align="right">运算符</th>
<th align="right">类</th>
<th align="center">结合性</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td align="right">()</td>
<td align="right">括号运算符</td>
<td align="center">由左至右</td>
</tr>
<tr>
<td>2</td>
<td align="right">!、+（正号）、-（负号）</td>
<td align="right">一元运算符</td>
<td align="center">由左至右</td>
</tr>
<tr>
<td>2</td>
<td align="right">~</td>
<td align="right">位逻辑运算符</td>
<td align="center">由右至左</td>
</tr>
<tr>
<td>2</td>
<td align="right">++、–</td>
<td align="right">递增与递减运算符</td>
<td align="center">由右至左</td>
</tr>
<tr>
<td>3</td>
<td align="right">*、/、%</td>
<td align="right">算术运算符</td>
<td align="center">由左至右</td>
</tr>
<tr>
<td>4</td>
<td align="right">+、-</td>
<td align="right">算术运算符</td>
<td align="center">由左至右</td>
</tr>
<tr>
<td>5</td>
<td align="right">&lt;&lt;、&gt;&gt;</td>
<td align="right">位左移、右移运算符</td>
<td align="center">由左至右</td>
</tr>
<tr>
<td>6</td>
<td align="right">&gt;、&gt;=、&lt;、&lt;=</td>
<td align="right">关系运算符</td>
<td align="center">由左至右</td>
</tr>
<tr>
<td>7</td>
<td align="right">==、!=</td>
<td align="right">关系运算符</td>
<td align="center">由左至右</td>
</tr>
<tr>
<td>8</td>
<td align="right">&amp;</td>
<td align="right">位运算符、逻辑运算符</td>
<td align="center">由左至右</td>
</tr>
<tr>
<td>9</td>
<td align="right">^</td>
<td align="right">位运算符、逻辑运算符</td>
<td align="center">由左至右</td>
</tr>
<tr>
<td>10</td>
<td align="right"></td>
<td align="right"></td>
<td align="center">位运算符、逻辑运算符</td>
</tr>
<tr>
<td>11</td>
<td align="right">&amp;&amp;</td>
<td align="right">逻辑运算符</td>
<td align="center">由左至右</td>
</tr>
<tr>
<td>12</td>
<td align="right"></td>
<td align="right"></td>
<td align="center"></td>
</tr>
<tr>
<td>13</td>
<td align="right">? :</td>
<td align="right">条件运算符</td>
<td align="center">由右至左</td>
</tr>
<tr>
<td>14</td>
<td align="right">=、+=、-=、*=、/=、%=</td>
<td align="right">赋值运算符、扩展运算符</td>
<td align="center">由右至左</td>
</tr>
</tbody></table>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><table>
<thead>
<tr>
<th>运算符</th>
<th align="right"></th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>逻辑与</td>
<td align="right">&amp;( 与)</td>
<td align="center">两个操作数为true，结果才是true，否则是false</td>
</tr>
<tr>
<td>逻辑或</td>
<td align="right"></td>
<td align="center">(或)</td>
</tr>
<tr>
<td>短路与</td>
<td align="right">&amp;&amp;( 与)</td>
<td align="center">只要有一个为false，则直接返回false</td>
</tr>
<tr>
<td>短路或</td>
<td align="right"></td>
<td align="center"></td>
</tr>
<tr>
<td>逻辑非</td>
<td align="right">!（非）</td>
<td align="center">取反：!false为true，!true为false</td>
</tr>
<tr>
<td>逻辑异或</td>
<td align="right">^（异或）</td>
<td align="center">相同为false，不同为true</td>
</tr>
<tr>
<td>Integer.toBinaryString</td>
<td align="right"></td>
<td align="center">一个整数的二进制表达</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td align="right"></td>
<td align="center">左移</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td align="right"></td>
<td align="center">右移</td>
</tr>
<tr>
<td>&gt;&gt;&gt;</td>
<td align="right"></td>
<td align="center">带符号右移与无符号右移</td>
</tr>
</tbody></table>
<h3 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h3><p>语法格式：<br>1    x ? y : z<br>其中 x 为 boolean 类型表达式，先计算 x 的值，若为true，则整个运算的结果为表达式 y 的值，否则整个运算结果为表达式 z 的值。</p>
<h3 id="带符号右移-gt-gt"><a href="#带符号右移-gt-gt" class="headerlink" title="带符号右移 &gt;&gt;"></a>带符号右移 &gt;&gt;</h3><p>对于正数， 带符号右移 &gt;&gt; 会把所有的位右移，并在最前面补0<br>对于负数， 带符号右移 &gt;&gt; 会把所有的位右移，并在最前面补1</p>
<h3 id="无符号右移-gt-gt-gt"><a href="#无符号右移-gt-gt-gt" class="headerlink" title="无符号右移&gt;&gt;&gt;"></a>无符号右移&gt;&gt;&gt;</h3><p>如果是一个负数，那么对应的二进制的第一位是1<br>无符号右移&gt;&gt;&gt;会把第一位的1也向右移动，导致移动后，第一位变成0<br>这样就会使得负数在无符号右移后，得到一个正数</p>
<h3 id="自增-自减"><a href="#自增-自减" class="headerlink" title="自增 自减"></a>自增 自减</h3><p>++ –<br>i++  先赋值再自增<br>++i先自增再赋值</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>解决next主题菜单栏显示问号</title>
    <url>/2020/05/01/nexttubiao/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>菜单栏和翻页按钮小图标显示不出来的问题终于解决了。</p>
<a id="more"></a>
<h3 id="解决next主题菜单栏显示问号"><a href="#解决next主题菜单栏显示问号" class="headerlink" title="解决next主题菜单栏显示问号"></a>解决next主题菜单栏显示问号</h3><p><img src="https://tuchuang-1301263664.cos.ap-nanjing.myqcloud.com/%E5%9B%BE%E6%A0%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/1.jpg" alt="image text"><br><img src="https://tuchuang-1301263664.cos.ap-nanjing.myqcloud.com/%E5%9B%BE%E6%A0%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/2.jpg" alt="image text"><br><img src="" alt="image text"><br>修改主题配置文件下(themes/_config.yml)的menu，每一个路径后面加||然后加图标</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F;||home</span><br><span class="line">  # about: &#x2F;about&#x2F;||user</span><br><span class="line">  # tags: &#x2F;tags&#x2F;||tags</span><br><span class="line">  #categories: &#x2F;categories&#x2F; || th</span><br><span class="line">  archives: &#x2F;archives&#x2F;||archive</span><br><span class="line">  top: &#x2F;top&#x2F;||signal</span><br><span class="line">  links: &#x2F;links&#x2F;||user-plus</span><br><span class="line">  #schedule: &#x2F;schedule&#x2F; || calendar</span><br><span class="line">  # books: &#x2F;books&#x2F;||book</span><br><span class="line">  messageboard: &#x2F;messageboard&#x2F; ||comment</span><br><span class="line">  #sitemap: &#x2F;sitemap.xml || sitemap</span><br><span class="line">  #commonweal: &#x2F;404&#x2F; || heartbeat</span><br><span class="line"></span><br><span class="line"># Enable&#x2F;Disable menu icons.</span><br><span class="line">menu_icons:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>
<p>注意: /与||之间是没有空格的!</p>
<h3 id="解决next主题下翻页按钮图标无法显示问题"><a href="#解决next主题下翻页按钮图标无法显示问题" class="headerlink" title="解决next主题下翻页按钮图标无法显示问题"></a>解决next主题下翻页按钮图标无法显示问题</h3><p>修改themes/layout/_partials/pagination.swig文件，直接改为&lt;与&gt;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;</span><br><span class="line">     paginator(&#123;</span><br><span class="line">       prev_text: &#39;&lt;&#39;,</span><br><span class="line">       next_text: &#39;&gt;&#39;,</span><br><span class="line">       mid_size: 1</span><br><span class="line">     &#125;)</span><br></pre></td></tr></table></figure>

<p>参考文章：<br><a href="https://www.cnblogs.com/xiejava/p/12456273.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiejava/p/12456273.html</a><br><a href="https://blog.csdn.net/qq_36852780/article/details/104657642" target="_blank" rel="noopener">https://blog.csdn.net/qq_36852780/article/details/104657642</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>ServletContext</title>
    <url>/2020/11/17/servletcontext/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>web容器在启动的时候，它会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的web应用；</p>
<a id="more"></a>
<h3 id="1-共享数据"><a href="#1-共享数据" class="headerlink" title="1.共享数据"></a>1.共享数据</h3><p>我在这个Servlet中保存的数据，可以在另外一个servlet中拿到；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletTest</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//this.getInitParameter()   初始化参数</span></span><br><span class="line">        <span class="comment">//this.getServletConfig()   Servlet配置</span></span><br><span class="line">        <span class="comment">//this.getServletContext()  Servlet上下文</span></span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line"></span><br><span class="line">        String username = <span class="string">"xiaotong"</span>; <span class="comment">//数据</span></span><br><span class="line">        context.setAttribute(<span class="string">"username"</span>,username); <span class="comment">//将一个数据保存在了ServletContext中，名字为：username 。值 username</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String username = (String) context.getAttribute(<span class="string">"username"</span>);</span><br><span class="line"></span><br><span class="line">        resp.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        resp.getWriter().print(<span class="string">"名字"</span>+username);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-获取初始化参数"><a href="#2-获取初始化参数" class="headerlink" title="2.获取初始化参数"></a>2.获取初始化参数</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置一些web应用初始化参数--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">    String url = context.getInitParameter(<span class="string">"url"</span>);</span><br><span class="line">    resp.getWriter().print(url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-请求转发"><a href="#3-请求转发" class="headerlink" title="3.请求转发"></a>3.请求转发</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">    System.out.println(<span class="string">"进入了ServletDemo04"</span>);</span><br><span class="line">    <span class="comment">//RequestDispatcher requestDispatcher = context.getRequestDispatcher("/gp"); //转发的请求路径</span></span><br><span class="line">    <span class="comment">//requestDispatcher.forward(req,resp); //调用forward实现请求转发；</span></span><br><span class="line">    context.getRequestDispatcher(<span class="string">"/gp"</span>).forward(req,resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javaEE</category>
      </categories>
      <tags>
        <tag>servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>java标识符的命名规范</title>
    <url>/2020/04/24/%E6%A0%87%E8%AF%86%E7%AC%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>java标识符的命名规范<br>（规范是程序员的基本准则,不规范会直接损害你的个人形象）</p>
<a id="more"></a>
<h3 id="变量和常量命名规范"><a href="#变量和常量命名规范" class="headerlink" title="变量和常量命名规范"></a>变量和常量命名规范</h3><p>所有变量、方法、类名：见名知意<br>类成员变量：首字母小写和驼峰原则（monthSalary）<br>局部变量：首字母小写和驼峰原则<br>常量：大写字母和下划线:MAX_VALUE<br>类名：首字母大写和驼峰原则（Man,GoodMan）<br>方法名：首字母小写和驼峰原则:run(),runRun()<br>//变量本质上就是代表一个“可操作的存储空间”，空间位置是确定的，但是里面放置什么值不确定。我们可通过变量名来访问“对应的存储空间”，<br>//从而操纵这个“存储空间”存储的值。<br>//java是一种强制 型语言，每个变量都必须声明其书局类型。变量的数据类型决定了变量占据存储空间的大小。比如 int a = 3; 表示a变量的空间大小为4个字节</p>
<h3 id="标识符的命名规则："><a href="#标识符的命名规则：" class="headerlink" title="标识符的命名规则："></a>标识符的命名规则：</h3><p>标识符必须以字母、下划线_、美元符号$开头。<br>标识符其它部分可以是字母、下划线“_”、美元符“$”和数字的任意组合。<br>Java 标识符大小写敏感，且长度无限制。<br>标识符不可以是Java的关键字。<br><a href="https://www.sxt.cn/Java_jQuery_in_action/Java_Identifier.html" target="_blank" rel="noopener">原文来源</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>解决hexo启动服务器后页面不显示</title>
    <url>/2020/05/01/%E8%A7%A3%E5%86%B3hexo-s%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="解决hexo启动服务器后页面不显示"><a href="#解决hexo启动服务器后页面不显示" class="headerlink" title="解决hexo启动服务器后页面不显示"></a>解决hexo启动服务器后页面不显示</h2><p>今天打开电脑修改hexo主题的样式，在启动hexo s后打开页面的时候发现页面根本打不开,查看任务管理后才发现端口被占用！！！挺小白的问题，是我太菜。</p>
<a id="more"></a>
<p>一般解决方法都是在window的cmd下输入下面的命令来查看占用端口的进程,然后去任务管理器的进程选项结束进程.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ netstat -ano|findestr 4000(端口名)</span><br></pre></td></tr></table></figure>
<p>查看了<a href="https://hexo.io/docs/server" target="_blank" rel="noopener">官网文档</a>的server用法后发现，<br>其实还有更简单的方法：</p>
<h3 id="方法1：使用-p选项可以设置不同的端口。再打开网页就大公告成了。"><a href="#方法1：使用-p选项可以设置不同的端口。再打开网页就大公告成了。" class="headerlink" title="方法1：使用-p选项可以设置不同的端口。再打开网页就大公告成了。"></a>方法1：使用-p选项可以设置不同的端口。再打开网页就大公告成了。</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server -p 5000</span><br></pre></td></tr></table></figure>


<h3 id="方法2：如果每次4000端口都被占用的话，方法一这样设置会很麻烦。所以直接在根目录下的配置文件-config-yml后直接配置端口："><a href="#方法2：如果每次4000端口都被占用的话，方法一这样设置会很麻烦。所以直接在根目录下的配置文件-config-yml后直接配置端口：" class="headerlink" title="方法2：如果每次4000端口都被占用的话，方法一这样设置会很麻烦。所以直接在根目录下的配置文件_config.yml后直接配置端口："></a>方法2：如果每次4000端口都被占用的话，方法一这样设置会很麻烦。所以直接在根目录下的配置文件_config.yml后直接配置端口：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 5000   <span class="comment">##端口号</span></span><br><span class="line">  compress: <span class="literal">true</span>   </span><br><span class="line">  header: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>注意：在使用完hexo s的时候，记得关闭，否则再另开启一个也会出现被占用的问题。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
