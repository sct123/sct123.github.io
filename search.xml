<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>cos对象存储拒绝访问解决方法（腾讯云）</title>
    <url>/2020/04/25/cosnew/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>昨天一直在图床的测试，然后访问的时候一直提示Access Denied，emmm我太菜了。当时因为我看不懂英HHHHH。直接百度了.cors跨域访问也设置了,访问权限公有读也设置了,为什么还不能访问呢？</p>
<a id="more"></a>
<p><img src="https://tuchuang-1301263664.cos.ap-nanjing.myqcloud.com/cos%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/1.jpg" alt="Images text"><br><img src="https://tuchuang-1301263664.cos.ap-nanjing.myqcloud.com/cos%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/2.jpg" alt="Images text"><br><img src="https://tuchuang-1301263664.cos.ap-nanjing.myqcloud.com/cos%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/3.jpg" alt="images text"></p>
<p>经过广大的网友大佬们的帮助找到了问题1如果你没有在基础配置里设置防盗链,或者权限里面设置Policy权限,访问对象链接就会报错Access Denied,没有权限。设置方法可以官网给的提示。<br><img src="https://tuchuang-1301263664.cos.ap-nanjing.myqcloud.com/cos%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/4.jpg" alt="image text"><br><img src="https://tuchuang-1301263664.cos.ap-nanjing.myqcloud.com/cos%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/5.jpg" alt="image text"></p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>cos</tag>
      </tags>
  </entry>
  <entry>
    <title>较为完整win10程序员计算器使用教程</title>
    <url>/2020/05/28/calc/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>前言：关于win10程序员计算器的使用，如有错误，欢迎指出。版本为10.1910.0.0</p>
<a id="more"></a>
<p>快捷进入win键+R  输入calc</p>
<p>HEX ：十六进制     DEC：十进制        OCT：八进制    BIN：二进制，注意这里的二进制为二进制补码形式<br>每输入一个数，进制转换会自动进行</p>
<p>QWORD：四字（64位）    DWORD：双字（32位）    WORD：字（16位）    BYTE：字节（8位）</p>
<p>CE：清除本次输入        C：清除所有输入，结束计算        MS：内存存储    M：查看内存<br><img src="https://s1.ax1x.com/2020/05/28/tZfqRx.png" alt=""></p>
]]></content>
  </entry>
  <entry>
    <title>java对象流 EOFException异常</title>
    <url>/2020/05/05/EOFException/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>这里描述的java.io.EOFException异常是在对象流（也就是ObjectInputStream，ObjectOutputStream）的使用过程中，抛出的。</p>
<a id="more"></a>
<p>什么是对象流？</p>
<p>对象流指的是可以直接把一个对象以流的形式传输给其他的介质，比如硬盘<br>一个对象以流的形式进行传输，叫做序列化。该对象所对应的类，必须是实现Serializable接口。<a href="https://how2j.cn/p/5689" target="_blank" rel="noopener">详细学习</a></p>
<p>如果你使用使用对象流那么必须配套使用,因为用对象流的方式写人文件，文件的开头会有序列头，就像协议一样，是规定好的。如下是用java写人的Hero对象:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">        序列头     对象                数值</span><br><span class="line">序列头?            Hero        I hpL namet Ljava/lang/String;xp  ht garen</span><br></pre></td></tr></table></figure>
<h3 id="对象流不同于普通的字节流，当对象流中没有数据时，程序却尝试读取异常，会报EOF错误；而字节流就不会出现这种情况，字节流会返回-1-。"><a href="#对象流不同于普通的字节流，当对象流中没有数据时，程序却尝试读取异常，会报EOF错误；而字节流就不会出现这种情况，字节流会返回-1-。" class="headerlink" title="对象流不同于普通的字节流，当对象流中没有数据时，程序却尝试读取异常，会报EOF错误；而字节流就不会出现这种情况，字节流会返回-1 。"></a>对象流不同于普通的字节流，当对象流中没有数据时，程序却尝试读取异常，会报EOF错误；而字节流就不会出现这种情况，字节流会返回-1 。</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 初始化Object流语句</span></span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">FileOututStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">dis = <span class="keyword">new</span> ObjectInputStream(fis); <span class="comment">// 报错的就是这一行，第xx行</span></span><br><span class="line">dos = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line"></span><br><span class="line">java.io.EOFException</span><br><span class="line">	at java.io.ObjectInputStream$PeekInputStream.readFully(ObjectInputStream.java:<span class="number">2681</span>)</span><br><span class="line">	at java.io.ObjectInputStream$BlockDataInputStream.readShort(ObjectInputStream.java:<span class="number">3156</span>)</span><br><span class="line">	at java.io.ObjectInputStream.readStreamHeader(ObjectInputStream.java:<span class="number">862</span>)</span><br><span class="line">	at java.io.ObjectInputStream.&lt;init&gt;(ObjectInputStream.java:<span class="number">358</span>)</span><br><span class="line">	at Test.main(Test.java:xx行) <span class="comment">// 第xx行报错</span></span><br></pre></td></tr></table></figure>
<p>因为ObjectInputStream构造函数会从传入的InputStream来读取数据。首先会读取序列化流的头部(serialization stream header)并验证头部。此构造器会一直地”阻塞”，直到与之对应的ObjectOutputStream写入了序列化头部。(阻塞并不完全正确，详细见<a href="https://blog.csdn.net/qq_37206105/article/details/90461717" target="_blank" rel="noopener">Canliture</a>的文章)，</p>
<p>所以我们先实例化ObjectOutputStream，再实例化 ObjectInputStream，保证在在同一资源的对象流ObjectInputStream能够及时读取到序列化头而不至于阻塞或者引发EOF异常(阻塞对应于Socket IO，EOF异常对应于文件IO)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dos = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">dis = <span class="keyword">new</span> ObjectInputStream(fis);</span><br></pre></td></tr></table></figure>



<h3 id="ObjectInputStream写入的数据，在ObjectOutputStream上读取时，应该按照相同的数据类型依次读取，否则数据类型不等会抛出EOFException"><a href="#ObjectInputStream写入的数据，在ObjectOutputStream上读取时，应该按照相同的数据类型依次读取，否则数据类型不等会抛出EOFException" class="headerlink" title="ObjectInputStream写入的数据，在ObjectOutputStream上读取时，应该按照相同的数据类型依次读取，否则数据类型不等会抛出EOFException"></a>ObjectInputStream写入的数据，在ObjectOutputStream上读取时，应该按照相同的数据类型依次读取，否则数据类型不等会抛出EOFException</h3><p>下文的错误把dis.readInt() 改为 dis.readObject()就能解决</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"> File f0 = <span class="keyword">new</span> File(<span class="string">"kkk.out"</span>);</span><br><span class="line"> FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line"> FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line"> ObjectInputStream dis = <span class="keyword">null</span>;</span><br><span class="line"> ObjectOutputStream dos = <span class="keyword">null</span>;</span><br><span class="line"> <span class="keyword">try</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(!f0.exists())f0.createNewFile();</span><br><span class="line"></span><br><span class="line">     fos = <span class="keyword">new</span> FileOutputStream(f0);</span><br><span class="line">     fis = <span class="keyword">new</span> FileInputStream(f0);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 1. 初始化Object流语句</span></span><br><span class="line">     dis = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line">     dos = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 2. 写"对象"语句</span></span><br><span class="line">     dos.writeInt(<span class="number">1</span>);                             <span class="comment">//异常处</span></span><br><span class="line">     dos.writeObject(<span class="keyword">new</span> Integer(<span class="number">3</span>));         </span><br><span class="line"></span><br><span class="line">     <span class="comment">// 3. 读取，输出语句</span></span><br><span class="line">     System.out.println(dis.readInt() + <span class="string">","</span>+ dis.readInt());</span><br><span class="line"> &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">     e.printStackTrace();</span><br><span class="line">     <span class="keyword">if</span>(fos != <span class="keyword">null</span>) fos.close();</span><br><span class="line">     <span class="keyword">if</span>(fis != <span class="keyword">null</span>) fis.close();</span><br><span class="line">     <span class="keyword">if</span>(dos != <span class="keyword">null</span>) dos.close();</span><br><span class="line">     <span class="keyword">if</span>(dis != <span class="keyword">null</span>) dis.close();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>1.对象流不同于普通的字节流，当对象流中没有数据时，程序却尝试读取数据，会报EOFException；而字节流就不会出现这种情况，字节流会返回-1</p>
<p>2.ObjectInputStream写入的数据，在ObjectOutputStream上读取时，应该按照相同的数据类型依次读取，否则数据类型不等会抛出EOFException</p>
<p>3.最好在实际使用的过程中，我们先实例化ObjectOutputStream，再实例化 ObjectInputStream，这是由这两个类的设计思想所决定的。如此能保证在同一资源的对象流ObjectInputStream能够及时读取到序列化头而不至于阻塞或者引发EOF异常(阻塞对应于Socket IO，EOF异常对应于文件IO)</p>
<p>如果想从源码上了解问题请点击下放的原文链接</p>
<p>原文链接：<a href="https://blog.csdn.net/qq_37206105/article/details/90461717" target="_blank" rel="noopener">Canliture</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java集合</title>
    <url>/2020/05/13/gather/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>java的具体集合和集合中的接口关系图</p>
<a id="more"></a>
<h3 id="集合常用方法"><a href="#集合常用方法" class="headerlink" title="集合常用方法"></a>集合常用方法</h3><p>add    增加<br>contains    判断是否存在<br>get    获取指定位置的对象<br>indexOf    获取对象所处的位置<br>remove    删除<br>set    替换<br>size    获取大小<br>toArray    转换为数组<br>addAll    把另一个容器所有对象都加进来<br>clear    清空</p>
<h4 id="Collections类"><a href="#Collections类" class="headerlink" title="Collections类"></a>Collections类</h4><p>Collections是一个类，容器的工具类,就如同Arrays是数组的工具类<br>reverse    反转<br>shuffle    混淆<br>sort    排序<br>swap    交换<br>rotate    滚动<br>synchronizedList    线程安全化</p>
<h3 id="集合框架中的接口"><a href="#集合框架中的接口" class="headerlink" title="集合框架中的接口"></a>集合框架中的接口</h3><p><img src="https://ftp.bmp.ovh/imgs/2020/05/06e273f2a35d2ac8.jpg" alt=""><br>Collection是 Set List Queue和 Deque的接口<br>Queue: 先进先出队列<br>Deque: 双向链表</p>
<p>注：Collection和Map之间没有关系，Collection是放一个一个对象的，Map 是放键值对的<br>注：Deque 继承 Queue,间接的继承了 Collection</p>
<p>List 是一个有序集合。元 素 会 增 加 到 容 器 中 的 特 定 位 置 。 可 以 采 用两种方式访问元素 ：</p>
<p>使用迭代器访问，或者使用一个整数索引来访问。<br>后一种方法称为随机访问( random access) , 因为这样可以按任意顺序访问元素。<br>与之不同 ， 使用迭代器访问时 ，必须顺序地访问元素。</p>
<p>Set 接口等同于 Collection 接口,不过其方法的行为有更严谨的定义。集 （ set )的 add 方法不允许增加重复的元素。<br>要适当地定义集的 equals 方法 ： 只要两个集包含同样的元素就认为是相等的，而不要求这些元素有同样的顺序 。</p>
<p>hashCode 方法的定义要保证包含相同元素的两个集会得到相同的散列码。</p>
<p>SortedSet 和 SortedMap 接口会提供用于排序的比较器对象， 这两个接口定义了可以得到集合子集视图的方法。</p>
<p> Java SE 6 引人了接口 NavigableSet 和 NavigableMap ,<br>其中包含一些用于搜索和遍历有序集和映射的方法。(理想情况下,这些方法本应当直接包含在 SortedSet和 SortedMap接口中。)TreeSet 和 TreeMap 类实现了这些接口。</p>
<p>标记接口 RandomAccess：为了避免对链表完成随机访问操作 –Java SE 1.4 引入。</p>
<h3 id="具体的集合"><a href="#具体的集合" class="headerlink" title="具体的集合"></a>具体的集合</h3><p><img src="https://ftp.bmp.ovh/imgs/2020/05/c828167783de519d.jpg" alt=""></p>
<p>ArrayList                                 一种可以动态增长和缩减的索引序列<br>LinkedList            一种可以在任何位置进行高效地插人和删除操作的有序序列<br>ArrayDeque        一种用循环数组实现的双端队列<br>HashSet            一种没有重复元素的无序集合<br>TreeSet            — 种有序集<br>EnumSet            一种包含枚举类型值的集<br>LinkedHashSet        一种可以记住元素插人次序的集<br>PriorityQueue        一种允许高效删除最小元素的集合<br>HashMap            一种存储键 / 值关联的数据结构<br>TreeMap            — 种键值有序排列的映射表<br>EnumMap            一种键值属于枚举类型的映射表<br>LinkedHashMap        一种可以记住键 / 值项添加次序的映射表<br>WeakHashMap        一种其值无用武之地后可以被垃圾回收器回收的映射表<br>IdentityHashMap        一种用 = 而不是用 equals 比较键值的映射表</p>
<p>Hashtable、Vector线程安全的类</p>
<p>本文章参考《core java第十版》与 <a href="https://how2j.cn/p/5752" target="_blank" rel="noopener">how2j</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo的使用</title>
    <url>/2020/04/24/hexo-%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>记录一些我学到hexo命令</p>
<a id="more"></a>
<h2 id="Hexo学到的东西"><a href="#Hexo学到的东西" class="headerlink" title="Hexo学到的东西"></a>Hexo学到的东西</h2><h3 id="hexo命令1-本地部署"><a href="#hexo命令1-本地部署" class="headerlink" title="hexo命令1-本地部署"></a>hexo命令1-本地部署</h3><pre><code class="bash">$ hexo init &lt;folder&gt; <span class="comment">#init是初始化一个hexo文件夹</span></code></pre>
<pre><code class="bash">$ <span class="built_in">cd</span> &lt;folder&gt;  <span class="comment">#注意一定要打开文件夹才能进行部署</span></code></pre>
<pre><code class="bash">$ npm install    <span class="comment">#部署之前进行安装</span></code></pre>
<pre><code class="bash">$ hexo g   <span class="comment">#生成静态网页</span></code></pre>
<pre><code class="bash">$ hexo s      <span class="comment">#启动服务器 启动之后会默认给一个网址进去就是我们部署的网页了</span></code></pre>
<h3 id="更换hexo主题"><a href="#更换hexo主题" class="headerlink" title="更换hexo主题"></a>更换hexo主题</h3><pre><code class="bash"> 把你想更换的主题放在themes目录下。官网有很多好看的主题：https://hexo.io/themes/

 然后修改站点目录下的_config.yml配置文件找到themes: landscape(默认主题)

修改成你在themes下放好的主题，就完成了</code></pre>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>java个人笔记</title>
    <url>/2020/05/07/java-notes/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>前言：学完就忘怎么办？复习呗，qaq。本文章是我个人对javase基础的复习（汗）,一天复习一点点，奥利给！</p>
<a id="more"></a>
<h2 id="与equals的区别"><a href="#与equals的区别" class="headerlink" title="==与equals的区别"></a>==与equals的区别</h2><p>This article is written in 2020-5-7.</p>
<h3 id="在Object类下（普通类）-和equals并没有什么区别，都是判断是否是同一个对象。"><a href="#在Object类下（普通类）-和equals并没有什么区别，都是判断是否是同一个对象。" class="headerlink" title="在Object类下（普通类）,==和equals并没有什么区别，都是判断是否是同一个对象。"></a>在Object类下（普通类）,==和equals并没有什么区别，都是判断是否是同一个对象。</h3><p>举例:   可以看得来==和equals并没有什么区别。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">        Test t1 = <span class="keyword">new</span> Test(<span class="string">"好"</span>);</span><br><span class="line">        Test t2 = t1;     <span class="comment">//将t2指向t1,使t2和t1指向同一个对象</span></span><br><span class="line">        Test t3 = <span class="keyword">new</span> Test(<span class="string">"好"</span>); <span class="comment">//t3指向一个新的对象</span></span><br><span class="line">        <span class="comment">//虽然t1和t3的内容相同，但是并不是一个对象。所以打印结果为：false;</span></span><br><span class="line">        System.out.println(<span class="string">"==:  t1和t2是否同一个对象："</span>+t1==t2);</span><br><span class="line">        System.out.println(<span class="string">"==:  t1和t3是否同一个对象："</span>+t1==t3);</span><br><span class="line">        System.out.println(<span class="string">"equals:   t1和t2是否同一个对象："</span>+t1.equals(t2));</span><br><span class="line">        System.out.println(<span class="string">"equals    1和t3是否同一个对象："</span>+t1.equals.(t3));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">控制台输出结果为：</span><br><span class="line">==:  t1和t2是否同一个对象：<span class="keyword">true</span></span><br><span class="line">==:  t1和t3是否同一个对象：<span class="keyword">false</span></span><br><span class="line">equals:   t1和t2是否同一个对象：<span class="keyword">true</span></span><br><span class="line">equals    <span class="number">1</span>和t3是否同一个对象：<span class="keyword">false</span></span><br></pre></td></tr></table></figure>
<p>当然你也可以使用==来判断对象的值(内容)是否相同。如上例的t1.name和t3.name是否相同 判断结果肯定是true。</p>
<h3 id="String类中-对equals方法进行了重写。使得equals方法可以用于判断内容是否相同。而-用于判断是否同一个对象-有个特性-。"><a href="#String类中-对equals方法进行了重写。使得equals方法可以用于判断内容是否相同。而-用于判断是否同一个对象-有个特性-。" class="headerlink" title="String类中,对equals方法进行了重写。使得equals方法可以用于判断内容是否相同。而==用于判断是否同一个对象(有个特性)。"></a>String类中,对equals方法进行了重写。使得equals方法可以用于判断内容是否相同。而==用于判断是否同一个对象(有个特性)。</h3><p>如下例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">	    String a =<span class="string">"嘿嘿"</span>;</span><br><span class="line">	    String b =<span class="string">"嘿嘿"</span>;</span><br><span class="line">	    String c = <span class="keyword">new</span> String(a);</span><br><span class="line">	    System.out.println(a==b);<span class="comment">//打印结果为：true</span></span><br><span class="line">	    System.out.println(a==c);<span class="comment">//打印结果为：false</span></span><br><span class="line">	    System.out.println(a.equals(c));<span class="comment">//打印结果为：true</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="特性："><a href="#特性：" class="headerlink" title="特性："></a>特性：</h5><p>在引用a和引用b里，字符串的字面值相同。在第六行中使用==判断结果为true，</p>
<p>是因为一般说来，编译器每碰到一个字符串的字面值，就会创建一个新的对象<br>所以在第3行会创建了一个新的字符串”嘿嘿”,</p>
<p>但是在第4行，编译器发现已经存在现成的”嘿嘿”，那么就直接拿来使用，而没有进行重复创建。（这里可以将字面值当为一个对象理解）</p>
<p>然而第5行虽然字面值和引用a,b相同，但是已经指向了一个新的对象，所以第7行判断结果为false。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>本站换域名啦(公告)</title>
    <url>/2020/04/27/howsyc/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本站已换成howsyc.cn的新域名,how=好，syc=四叶草,象征着幸运,总得来说=好幸运。就是进入本站的朋友们都会被幸运女神保佑，气运十足，如果是学生考试加分等，如果是工作者一切顺利，早日涨薪，如果…..emmm编不下去了(滑稽)。祝每一位来到本站的朋友幸福快乐！旧域名mykindle.xyz点击后会自动跳转到新域名,换域名是因为听说小姨子后缀百度收录不太好，所以就直接换了,菜鸡小站希望以后有点收录，感谢来访的朋友们，呜呜呜底部的底部的访客数清空了。</p>
]]></content>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>java数据类型</title>
    <url>/2020/04/24/java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>java的数据类型可分为两大类：<br>基本数据类型（primitive data type）和引用数据类型（referece data type)</p>
<a id="more"></a>
<h3 id="基本数据类型（primitive-data-type）："><a href="#基本数据类型（primitive-data-type）：" class="headerlink" title="基本数据类型（primitive data type）："></a>基本数据类型（primitive data type）：</h3><p>-整数类型（byte short int long）<br>型(java语言的整型常数默认为int型，声明long型常量可以后加 ‘l’或’L’)<br>浮点类型(float double)<br>字符型（char）<br>布尔型(boolean)        </p>
<h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><p>类（class）(String是引用类型)<br>接口(interface)<br>数组</p>
<p>$ //引用数据类型的大小统一为4个字节,记录的是其引用对象的地址</p>
<table>
<thead>
<tr>
<th>类型</th>
<th align="left">占用存储空间</th>
<th align="center">表示范围</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td align="left">1字节</td>
<td align="center">（=8位=2⑻=256字）    -2⑺ ~ 2⑺-1  （-128~127)</td>
</tr>
<tr>
<td>short</td>
<td align="left">2字节</td>
<td align="center">-2⒂ ~ 2⒂-1      (-32768~32767)</td>
</tr>
<tr>
<td>int</td>
<td align="left">4字节</td>
<td align="center">-2<em>(31幂)~2</em>(31幂)（ -2127283648~2147483647）（约21亿）</td>
</tr>
<tr>
<td>long</td>
<td align="left">8字节</td>
<td align="center">-2<em>(63) ~ 2</em>(63)-1</td>
</tr>
<tr>
<td>char</td>
<td align="left">2字节</td>
<td align="center"></td>
</tr>
<tr>
<td>boolean</td>
<td align="left">1位</td>
<td align="center"></td>
</tr>
<tr>
<td>float</td>
<td align="left">4字节</td>
<td align="center"></td>
</tr>
<tr>
<td>double</td>
<td align="left">8字节</td>
<td align="center"></td>
</tr>
</tbody></table>
<p> 基本数据类型的类型转换可分为：<br>自动类型转换：容量小的数据类型可以自动转换为容量大的数据类型<br>强制类型转换：用于显式的转换一个数值的类型，语法格式：(type)var</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>控制语句</title>
    <url>/2020/04/24/java%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>控制语句在基础中还是比较重要，还带那么一点有趣</p>
<a id="more"></a>
<h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><h3 id="选择结构："><a href="#选择结构：" class="headerlink" title="选择结构："></a>选择结构：</h3><p>if单选泽结构<br>if-else 双选择结构<br>if-else if - else多选择结构<br>switch结构</p>
<h3 id="循环结构："><a href="#循环结构：" class="headerlink" title="循环结构："></a>循环结构：</h3><p>while循环<br>do-while循环（先执行再判断，为true继续执行，否则停止）<br>for循环（初始化声明的变量作用域为整个for循环体内，在循环体外无法访问）<br>嵌套循环（  在一个循环语句内部再嵌套一个或多个循环，称为嵌套循环。<br>while、do-while与for循环可以任意嵌套多层。）<br>break和continue语句<br>带标签的break和continue</p>
<h3 id="下面是几个控制语句的例题"><a href="#下面是几个控制语句的例题" class="headerlink" title="下面是几个控制语句的例题"></a>下面是几个控制语句的例题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* 复利公式：</span><br><span class="line">F = p* ( (<span class="number">1</span>+r)^n );</span><br><span class="line">F 最终收入 p 本金 r 年利率 n 存了多少年</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Millionaire</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> p = <span class="number">1000</span>,n;</span><br><span class="line">		<span class="keyword">float</span> r = <span class="number">0.2F</span>;</span><br><span class="line">		<span class="keyword">int</span> F=<span class="number">0</span>  ;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; F&lt;=<span class="number">100000</span>; i++) &#123;</span><br><span class="line">			F=(<span class="keyword">int</span>) (p*((r/<span class="number">12</span>)+<span class="number">1</span>));</span><br><span class="line">			p+=<span class="number">1000</span>;</span><br><span class="line">			<span class="keyword">if</span> (F&gt;=<span class="number">100000</span>) &#123;</span><br><span class="line">				n=i/<span class="number">12</span>;</span><br><span class="line">				System.out.println(n);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* 黄金分割点：</span><br><span class="line"> * 寻找某两个数相除，其结果 离黄金分割点 <span class="number">0.618</span>最近</span><br><span class="line">分母和分子不能同时为偶数</span><br><span class="line">分母和分子 取值范围在[<span class="number">1</span>-<span class="number">20</span>]</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoldSenectionRatio</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 寻找某两个数相除，其结果 离黄金分割点 0.618最近</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// 分母和分子不能同时为偶数</span></span><br><span class="line">        <span class="comment">// 分母和分子 取值范围在[1-20]</span></span><br><span class="line">        <span class="keyword">int</span> range = <span class="number">20</span>; <span class="comment">// 取值范围</span></span><br><span class="line">        <span class="keyword">float</span> breakPoint = <span class="number">0.618f</span>; <span class="comment">// 黄金分割点</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">float</span> minDiff = <span class="number">100</span>; <span class="comment">// 离黄金分割点的差值</span></span><br><span class="line">        <span class="keyword">int</span> answerFenzi = <span class="number">0</span>; <span class="comment">// 找到的分子</span></span><br><span class="line">        <span class="keyword">int</span> answerFenmu = <span class="number">0</span>; <span class="comment">// 找到的分母</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> fenzi = <span class="number">1</span>; fenzi &lt;= range; fenzi++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> fenmu = <span class="number">1</span>; fenmu &lt;= range; fenmu++) &#123;</span><br><span class="line">                <span class="comment">// 分母和分子不能同时为偶数</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="number">0</span> == fenzi % <span class="number">2</span> &amp; <span class="number">0</span> == fenmu % <span class="number">2</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// 取值</span></span><br><span class="line">                <span class="keyword">float</span> value = (<span class="keyword">float</span>) fenzi / fenmu;</span><br><span class="line">                <span class="comment">// 取离黄金分割点的差值</span></span><br><span class="line">                <span class="keyword">float</span> diff = value - breakPoint;</span><br><span class="line">                <span class="comment">// 绝对值</span></span><br><span class="line">                diff = diff &lt; <span class="number">0</span> ? <span class="number">0</span> - diff : diff;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//                 找出最小的差值</span></span><br><span class="line">                <span class="keyword">if</span> (diff &lt; minDiff) &#123;</span><br><span class="line">                    minDiff = diff;</span><br><span class="line">                    answerFenzi = fenzi;</span><br><span class="line">                    answerFenmu = fenmu;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        System.out.println(<span class="string">"离黄金分割点("</span> + breakPoint + <span class="string">")最近的两个数相除是:"</span> + answerFenzi + <span class="string">"/"</span> + answerFenmu + <span class="string">"="</span></span><br><span class="line">                + ((<span class="keyword">float</span>) answerFenzi / answerFenmu));</span><br><span class="line"> </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/*计算数的阶乘*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factorial</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		 Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">	        System.out.println(<span class="string">"请输入一个整数："</span>);</span><br><span class="line">	        <span class="keyword">int</span> n = s.nextInt();</span><br><span class="line">	        <span class="keyword">int</span> fac = <span class="number">1</span>;</span><br><span class="line">	        <span class="keyword">while</span>(n&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">	            fac *=n;</span><br><span class="line">	            n--;</span><br><span class="line">	        &#125;</span><br><span class="line">	        System.out.println(<span class="string">"阶乘是:"</span> + fac);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*水仙花数定义：</span></span><br><span class="line"><span class="comment">1. 一定是3位数</span></span><br><span class="line"><span class="comment">2. 每一位的立方，加起来恰好是这个数本身，比如153=1*1*1+5*5*5+3*3*3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Daffodil</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> daffodil;</span><br><span class="line">		System.out.println(<span class="string">"打印所有的水仙花数："</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; <span class="number">10</span>; a++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt; <span class="number">10</span>; b++) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; <span class="number">10</span>; c++) &#123;</span><br><span class="line">					<span class="keyword">if</span> (a*<span class="number">100</span>+b*<span class="number">10</span>+c == (a*a*a)+(b*b*b)+(c*c*c)&amp;&amp;a*<span class="number">100</span>+b*<span class="number">10</span>+c&gt;<span class="number">99</span>) &#123;</span><br><span class="line">						daffodil =a*<span class="number">100</span>+b*<span class="number">10</span>+c;</span><br><span class="line">						System.out.println(daffodil);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://how2j.cn/p/5504" target="_blank" rel="noopener">例题来源</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo添加rss订阅功能</title>
    <url>/2020/04/24/hexo%E6%B7%BB%E5%8A%A0rss%E8%AE%A2%E9%98%85%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>hexo如何添加rss功能呢？</p>
<a id="more"></a>
<h3 id="rss包"><a href="#rss包" class="headerlink" title="rss包"></a>rss包</h3><p>在hexojs下有一个hexo-generator-feed的npm包,用来实现订阅功能<br>首先安装这个包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed</span><br></pre></td></tr></table></figure>
<p>安装成功后在themes的主题配置文件_config.yml下配置该插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">feed:</span><br><span class="line">    <span class="built_in">type</span>: atom</span><br><span class="line">    path: atom.xml</span><br><span class="line">    <span class="built_in">limit</span>: 20</span><br><span class="line">    hub:</span><br><span class="line">    content:</span><br><span class="line">    content_limit:</span><br><span class="line">    content_limit_delim: <span class="string">' '</span></span><br></pre></td></tr></table></figure>
<p>参数的含义：</p>
<p>type: RSS的类型(atom/rss2)</p>
<p>path: 文件路径,默认是atom.xml/rss2.xml</p>
<p>limit: 展示文章的数量,使用0或则false代表展示全部</p>
<p>hub:</p>
<p>content: 在RSS文件中是否包含内容 ,有3个值 true/false默认不填为false</p>
<p>content_limit: 指定内容的长度作为摘要,仅仅在上面content设置为false和没有自定义的描述出现<br>content_limit_delim: 上面截取描述的分隔符,截取内容是以指定的这个分隔符作为截取结束的标志.在达到规定的内容长度之前最后出现的这个分隔符之前的内容,，防止从中间截断.</p>
<h5 id="如果是next主题可以实现另一种方法："><a href="#如果是next主题可以实现另一种方法：" class="headerlink" title="如果是next主题可以实现另一种方法："></a>如果是next主题可以实现另一种方法：</h5><p>在主题的config.yml文件下找到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rss:</span><br></pre></td></tr></table></figure>
<p>直接设置为true就可以了</p>
<p>配置完成后直接在根目录下运行hexo g<br>就会在你博客的pubilc 文件夹下发现atom.xml文件了</p>
<p>参考文章：<a href="https://blog.csdn.net/weixin_34292287/article/details/88931060" target="_blank" rel="noopener">https://blog.csdn.net/weixin_34292287/article/details/88931060</a></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>java数组</title>
    <url>/2020/04/24/java%E6%95%B0%E7%BB%84%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>数组，以及Arrays.方法的使用</p>
<a id="more"></a>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="创建数组的时候，要指明数组的长度。"><a href="#创建数组的时候，要指明数组的长度。" class="headerlink" title="创建数组的时候，要指明数组的长度。"></a>创建数组的时候，要指明数组的长度。</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int a [ ] = new int[5] ; //分配了长度是5的数组，但是没有赋值</span><br><span class="line">a[4]=100; //下标4，实质上是“第5个”，即最后一个</span><br><span class="line">a[5]=101; //下标5，实质上是“第6个”，超出范围 ,产生数组下标越界异</span><br><span class="line"></span><br><span class="line">int[] a = new int[]&#123;100,102,444,836,3236&#125;;//写法一: 分配空间同时赋值</span><br><span class="line">int[] b = &#123;100,102,444,836,3236&#125;;//写法二： 省略了new int[],效果一样</span><br><span class="line"></span><br><span class="line">//写法三：同时分配空间，和指定内容</span><br><span class="line">//在这个例子里，长度是3，内容是5个，产生矛盾了</span><br><span class="line">//所以如果指定了数组的内容，就不能同时设置数组的长度</span><br><span class="line"> int[] c = new int[3]&#123;100,102,444,836,3236&#125;;</span><br></pre></td></tr></table></figure>


<h3 id="引用概念："><a href="#引用概念：" class="headerlink" title="引用概念："></a>引用概念：</h3><p>如果变量代表一个数组，比如a,我们把a叫做引用<br>与基本类型不同 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int c &#x3D; 5; 这叫给c赋值为5 </span><br><span class="line">声明一个引用 int[] a; </span><br><span class="line">a &#x3D; new int[5]; </span><br><span class="line">让a这个引用，指向数组</span><br><span class="line">常</span><br></pre></td></tr></table></figure>

<h3 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h3><p>选择法排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a.length-<span class="number">1</span>; j++) &#123;<span class="comment">//外层循环一次，</span></span><br><span class="line">因为最后一次剩下的就是最大的所以循环次数-<span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = j+<span class="number">1</span>; i &lt; a.length; i++) &#123;<span class="comment">//内层会全部循环一次</span></span><br><span class="line">    <span class="keyword">if</span>(a[i]&lt;a[j])&#123; <span class="comment">//如果然后的数小于前面的就换位 </span></span><br><span class="line">      <span class="keyword">int</span> temp = a[j];</span><br><span class="line">     a[j] = a[i];</span><br><span class="line">     a[i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>冒泡法排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a.length; j++) &#123;<span class="comment">//</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length-j-<span class="number">1</span>; i++) &#123;<span class="comment">//-1防止数组下标越界</span></span><br><span class="line"><span class="comment">//-j是因为每内循环一次，最大的就放在后面了，就不需要比较了</span></span><br><span class="line">    <span class="keyword">if</span>(a[i]&gt;a[i+<span class="number">1</span>])&#123; <span class="comment">//如果前面的大于后面的就互换 </span></span><br><span class="line">     <span class="keyword">int</span> temp = a[i];</span><br><span class="line">     a[i] = a[i+<span class="number">1</span>];</span><br><span class="line">     a[i+<span class="number">1</span>] = temp;</span><br><span class="line">              &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="增强型for循环遍历"><a href="#增强型for循环遍历" class="headerlink" title="增强型for循环遍历"></a>增强型for循环遍历</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> [] values = <span class="keyword">new</span> <span class="keyword">int</span>[];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> each : values) &#123;</span><br><span class="line">   System.out.println(each);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="复制数组："><a href="#复制数组：" class="headerlink" title="复制数组："></a>复制数组：</h3><p>把一个数组的值，复制到另一个数组中<br>System.arraycopy(src, srcPos, dest, destPos, length)<br>src: 源数组<br>srcPos: 从源数组复制数据的起始位置<br>dest: 目标数组<br>destPos: 复制到目标数组的起始位置<br>length: 复制的长度</p>
<p>这是一个二维数组，里面的每一个元素，都是一个一维数组<br>所以二维数组又叫数组的数组<br>int b[][] = new int[][]{<br>   {1,2,3},<br>   {4,5,6},<br>   {7,8,9}<br>};</p>
<h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><p>Arrays是针对数组的工具类，可以进行 排序，查找，复制填充等功能。 大大提高了开发人员的工作效率。</p>
<h3 id="copyOfRange-数组复制"><a href="#copyOfRange-数组复制" class="headerlink" title="copyOfRange    数组复制"></a>copyOfRange    数组复制</h3><p>与使用System.arraycopy进行数组复制类似的，Arrays提供了一个copyOfRange方法进行数组复制。<br>// copyOfRange(int[] original, int from, int to)<br>// 第一个参数表示源数组<br>// 第二个参数表示开始位置(取得到)<br>// 第三个参数表示结束位置(取不到)</p>
<h3 id="toString-转换为字符串"><a href="#toString-转换为字符串" class="headerlink" title="toString()    转换为字符串"></a>toString()    转换为字符串</h3><p>//int a[] = new int[] { 18, 62, 68, 82, 65, 9 };<br> //String content = Arrays.toString(a);<br>sort    排序<br>在前面章节学习了 选择法排序 和 冒泡法排序，Arrays工具类提供了一个sort方法，只需要一行代码即可完成排序功能。</p>
<h3 id="Arrays-sort-a"><a href="#Arrays-sort-a" class="headerlink" title="Arrays.sort(a);"></a>Arrays.sort(a);</h3><p>binarySearch    搜索<br>//使用binarySearch之前，必须先使用sort进行排序<br>//如果数组中有多个相同的元素，查找的结果是不确定的<br>int a[] = new int[] { 18, 62, 68, 82, 65, 9 };<br>Arrays.sort(a);<br>System.out.println(“数字 62出现的位置:”+Arrays.binarySearch(a, 62));</p>
<h3 id="equals-判断是否相同"><a href="#equals-判断是否相同" class="headerlink" title="equals    判断是否相同"></a>equals    判断是否相同</h3><p>//比较两个数组的内容是否一样<br>System.out.println(Arrays.equals(a, b));</p>
<h3 id="fill-填充"><a href="#fill-填充" class="headerlink" title="fill    填充"></a>fill    填充</h3><p>//使用同一个值，填充整个数组<br>int a[] = new int[10];<br>Arrays.fill(a, 5);</p>
<h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 练习-二维数组排序</span></span><br><span class="line"><span class="comment"> * 首先定义一个5*8的二维数组，然后使用随机数填充满</span></span><br><span class="line"><span class="comment"> * 借助Arrays的方法对二维数组进行排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise_TwoDimensionSort</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> a[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>][<span class="number">8</span>];</span><br><span class="line">		<span class="keyword">int</span> []b = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">40</span>];<span class="comment">//这里必须赋值</span></span><br><span class="line"><span class="comment">//		int b = (int)(Math.random()*100);</span></span><br><span class="line"><span class="comment">//		Arrays.fill(a, b);  二维不能填充；</span></span><br><span class="line">		System.out.println(<span class="string">"排序前："</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;<span class="number">8</span>; j++) &#123;</span><br><span class="line">				a[i][j] =(<span class="keyword">int</span>)(Math.random()*<span class="number">100</span>);<span class="comment">//给二维数组赋值；</span></span><br><span class="line">				System.out.print(+a[i][j]+<span class="string">"\t"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">			</span><br><span class="line">			System.arraycopy(a[i], <span class="number">0</span>, b, i*<span class="number">8</span>, a[i].length);</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		Arrays.sort(b);</span><br><span class="line">		System.out.println(<span class="string">"排序后："</span>+Arrays.toString(b));</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">			System.arraycopy(b, i*<span class="number">8</span>, a[i],<span class="number">0</span>,<span class="number">8</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"新的二维数组："</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">				System.out.print(a[i][j]+<span class="string">"\t"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://how2j.cn/p/5505" target="_blank" rel="noopener">原文来源</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java运算符的优先级</title>
    <url>/2020/04/24/java%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>java运算符的优先级</p>
<a id="more"></a>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><table>
<thead>
<tr>
<th>优先级</th>
<th align="right">运算符</th>
<th align="right">类</th>
<th align="center">结合性</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td align="right">()</td>
<td align="right">括号运算符</td>
<td align="center">由左至右</td>
</tr>
<tr>
<td>2</td>
<td align="right">!、+（正号）、-（负号）</td>
<td align="right">一元运算符</td>
<td align="center">由左至右</td>
</tr>
<tr>
<td>2</td>
<td align="right">~</td>
<td align="right">位逻辑运算符</td>
<td align="center">由右至左</td>
</tr>
<tr>
<td>2</td>
<td align="right">++、–</td>
<td align="right">递增与递减运算符</td>
<td align="center">由右至左</td>
</tr>
<tr>
<td>3</td>
<td align="right">*、/、%</td>
<td align="right">算术运算符</td>
<td align="center">由左至右</td>
</tr>
<tr>
<td>4</td>
<td align="right">+、-</td>
<td align="right">算术运算符</td>
<td align="center">由左至右</td>
</tr>
<tr>
<td>5</td>
<td align="right">&lt;&lt;、&gt;&gt;</td>
<td align="right">位左移、右移运算符</td>
<td align="center">由左至右</td>
</tr>
<tr>
<td>6</td>
<td align="right">&gt;、&gt;=、&lt;、&lt;=</td>
<td align="right">关系运算符</td>
<td align="center">由左至右</td>
</tr>
<tr>
<td>7</td>
<td align="right">==、!=</td>
<td align="right">关系运算符</td>
<td align="center">由左至右</td>
</tr>
<tr>
<td>8</td>
<td align="right">&amp;</td>
<td align="right">位运算符、逻辑运算符</td>
<td align="center">由左至右</td>
</tr>
<tr>
<td>9</td>
<td align="right">^</td>
<td align="right">位运算符、逻辑运算符</td>
<td align="center">由左至右</td>
</tr>
<tr>
<td>10</td>
<td align="right"></td>
<td align="right"></td>
<td align="center">位运算符、逻辑运算符</td>
</tr>
<tr>
<td>11</td>
<td align="right">&amp;&amp;</td>
<td align="right">逻辑运算符</td>
<td align="center">由左至右</td>
</tr>
<tr>
<td>12</td>
<td align="right"></td>
<td align="right"></td>
<td align="center"></td>
</tr>
<tr>
<td>13</td>
<td align="right">? :</td>
<td align="right">条件运算符</td>
<td align="center">由右至左</td>
</tr>
<tr>
<td>14</td>
<td align="right">=、+=、-=、*=、/=、%=</td>
<td align="right">赋值运算符、扩展运算符</td>
<td align="center">由右至左</td>
</tr>
</tbody></table>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><table>
<thead>
<tr>
<th>运算符</th>
<th align="right"></th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>逻辑与</td>
<td align="right">&amp;( 与)</td>
<td align="center">两个操作数为true，结果才是true，否则是false</td>
</tr>
<tr>
<td>逻辑或</td>
<td align="right"></td>
<td align="center">(或)</td>
</tr>
<tr>
<td>短路与</td>
<td align="right">&amp;&amp;( 与)</td>
<td align="center">只要有一个为false，则直接返回false</td>
</tr>
<tr>
<td>短路或</td>
<td align="right"></td>
<td align="center"></td>
</tr>
<tr>
<td>逻辑非</td>
<td align="right">!（非）</td>
<td align="center">取反：!false为true，!true为false</td>
</tr>
<tr>
<td>逻辑异或</td>
<td align="right">^（异或）</td>
<td align="center">相同为false，不同为true</td>
</tr>
<tr>
<td>Integer.toBinaryString</td>
<td align="right"></td>
<td align="center">一个整数的二进制表达</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td align="right"></td>
<td align="center">左移</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td align="right"></td>
<td align="center">右移</td>
</tr>
<tr>
<td>&gt;&gt;&gt;</td>
<td align="right"></td>
<td align="center">带符号右移与无符号右移</td>
</tr>
</tbody></table>
<h3 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h3><p>语法格式：<br>1    x ? y : z<br>其中 x 为 boolean 类型表达式，先计算 x 的值，若为true，则整个运算的结果为表达式 y 的值，否则整个运算结果为表达式 z 的值。</p>
<h3 id="带符号右移-gt-gt"><a href="#带符号右移-gt-gt" class="headerlink" title="带符号右移 &gt;&gt;"></a>带符号右移 &gt;&gt;</h3><p>对于正数， 带符号右移 &gt;&gt; 会把所有的位右移，并在最前面补0<br>对于负数， 带符号右移 &gt;&gt; 会把所有的位右移，并在最前面补1</p>
<h3 id="无符号右移-gt-gt-gt"><a href="#无符号右移-gt-gt-gt" class="headerlink" title="无符号右移&gt;&gt;&gt;"></a>无符号右移&gt;&gt;&gt;</h3><p>如果是一个负数，那么对应的二进制的第一位是1<br>无符号右移&gt;&gt;&gt;会把第一位的1也向右移动，导致移动后，第一位变成0<br>这样就会使得负数在无符号右移后，得到一个正数</p>
<h3 id="自增-自减"><a href="#自增-自减" class="headerlink" title="自增 自减"></a>自增 自减</h3><p>++ –<br>i++  先赋值再自增<br>++i先自增再赋值</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java标识符的命名规范</title>
    <url>/2020/04/24/%E6%A0%87%E8%AF%86%E7%AC%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>java标识符的命名规范<br>（规范是程序员的基本准则,不规范会直接损害你的个人形象）</p>
<a id="more"></a>
<h3 id="变量和常量命名规范"><a href="#变量和常量命名规范" class="headerlink" title="变量和常量命名规范"></a>变量和常量命名规范</h3><p>所有变量、方法、类名：见名知意<br>类成员变量：首字母小写和驼峰原则（monthSalary）<br>局部变量：首字母小写和驼峰原则<br>常量：大写字母和下划线:MAX_VALUE<br>类名：首字母大写和驼峰原则（Man,GoodMan）<br>方法名：首字母小写和驼峰原则:run(),runRun()<br>//变量本质上就是代表一个“可操作的存储空间”，空间位置是确定的，但是里面放置什么值不确定。我们可通过变量名来访问“对应的存储空间”，<br>//从而操纵这个“存储空间”存储的值。<br>//java是一种强制 型语言，每个变量都必须声明其书局类型。变量的数据类型决定了变量占据存储空间的大小。比如 int a = 3; 表示a变量的空间大小为4个字节</p>
<h3 id="标识符的命名规则："><a href="#标识符的命名规则：" class="headerlink" title="标识符的命名规则："></a>标识符的命名规则：</h3><p>标识符必须以字母、下划线_、美元符号$开头。<br>标识符其它部分可以是字母、下划线“_”、美元符“$”和数字的任意组合。<br>Java 标识符大小写敏感，且长度无限制。<br>标识符不可以是Java的关键字。<br><a href="https://www.sxt.cn/Java_jQuery_in_action/Java_Identifier.html" target="_blank" rel="noopener">原文来源</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>idea搭建maven中遇到的错误</title>
    <url>/2020/08/21/mavenbuilderro/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Maven项目架构管理工具：<br>Maven的核心思想：<strong>约定大于配置</strong>,有约束，不要去违反。(来自狂神老师的教导)<br>下面是我在 idea搭建maven中遇到的错误,可以还有错误忘记写了，不是很全面请见谅。</p>
<a id="more"></a>
<h3 id="maven默认web项目中的web-xml版本问题"><a href="#maven默认web项目中的web-xml版本问题" class="headerlink" title="maven默认web项目中的web.xml版本问题"></a>maven默认web项目中的web.xml版本问题</h3><p>   1.1问题：和启动tomcat版本冲突<br>   1.2解决方法：替换为tomcat的版本<br><img src="https://ftp.bmp.ovh/imgs/2020/08/88084f42b60aff28.png" alt=""></p>
<h3 id="Error-java-Compliation-falied-internal-java-compiler-error-或无效的项目发行版本-13"><a href="#Error-java-Compliation-falied-internal-java-compiler-error-或无效的项目发行版本-13" class="headerlink" title="Error:java:Compliation falied:internal java compiler error.或无效的项目发行版本:13"></a>Error:java:Compliation falied:internal java compiler error.或无效的项目发行版本:13</h3><p>解决方法：项目的和文件里的冲突了 改成一样的就好了<br>路径：Settings-&gt;Build,Execution,Deployment-&gt;Compiler-&gt;Java Compiler<br><img src="https://ftp.bmp.ovh/imgs/2020/08/721c99808cdab0ad.png" alt="compiler"></p>
<h3 id="警告：No-archetype-found-in-remote-catalog-Defaulting-to-internal-catalog"><a href="#警告：No-archetype-found-in-remote-catalog-Defaulting-to-internal-catalog" class="headerlink" title="警告：No archetype found in remote catalog. Defaulting to internal catalog."></a>警告：No archetype found in remote catalog. Defaulting to internal catalog.</h3><pre><code>解决方法：https://blog.csdn.net/AdminGuan/article/details/103216314</code></pre><h3 id="报错Cannot-resolve-plugin-org-apache-maven-plugins-maven-compiler-plugin-3-1"><a href="#报错Cannot-resolve-plugin-org-apache-maven-plugins-maven-compiler-plugin-3-1" class="headerlink" title="报错Cannot resolve plugin org.apache.maven.plugins:maven-compiler-plugin:3.1"></a>报错Cannot resolve plugin org.apache.maven.plugins:maven-compiler-plugin:3.1</h3><pre><code>报错原因：本地maven的配置文件和仓库地址不一致
解决方法：注意选择自己的maven版本，将下面图中的override勾选，然后选择自己电脑本地的Maven配置文件和本地maven的仓库地址</code></pre><p><img src="https://ftp.bmp.ovh/imgs/2020/08/5e4ccaed2168a3d9.png" alt="maven仓库配置"></p>
<h3 id="IDEA中每次都要重复配置Maven"><a href="#IDEA中每次都要重复配置Maven" class="headerlink" title="IDEA中每次都要重复配置Maven"></a>IDEA中每次都要重复配置Maven</h3><p>解决方法：在IDEA中的全局默认配置中去配置<br>在左上角new那里的close project关闭项目，之后打开右下角的configure-&gt;Settings<br><img src="https://ftp.bmp.ovh/imgs/2020/08/75abf55bd8d62b0a.png" alt=""><br>找到Maven的仓库配置，注意选择自己的maven版本，将下面图中的override勾选，然后选择自己电脑本地的Maven配置文件和本地maven的仓库地址<br><img src="https://ftp.bmp.ovh/imgs/2020/08/3dfae78226506764.png" alt=""></p>
<h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><p>1.maven的pom.xml配置文件记得jdk版本改成你使用的版本(推荐1.8)</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</span><br><span class="line">    &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br></pre></td></tr></table></figure>

<p>参考文章：<br><a href="https://blog.csdn.net/qq_45309297/article/details/106436535" target="_blank" rel="noopener">https://blog.csdn.net/qq_45309297/article/details/106436535</a><br><a href="https://blog.csdn.net/AdminGuan/article/details/103216314" target="_blank" rel="noopener">https://blog.csdn.net/AdminGuan/article/details/103216314</a><br><a href="https://blog.csdn.net/AdminGuan/article/details/103216314" target="_blank" rel="noopener">https://blog.csdn.net/AdminGuan/article/details/103216314</a><br><a href="https://blog.csdn.net/weixin_42030357/article/details/92097971" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42030357/article/details/92097971</a><br><a href="https://www.cnblogs.com/loufangcheng/p/12861762.html" target="_blank" rel="noopener">https://www.cnblogs.com/loufangcheng/p/12861762.html</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>解决next主题菜单栏显示问号</title>
    <url>/2020/05/01/nexttubiao/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>菜单栏和翻页按钮小图标显示不出来的问题终于解决了。</p>
<a id="more"></a>
<h3 id="解决next主题菜单栏显示问号"><a href="#解决next主题菜单栏显示问号" class="headerlink" title="解决next主题菜单栏显示问号"></a>解决next主题菜单栏显示问号</h3><p><img src="https://tuchuang-1301263664.cos.ap-nanjing.myqcloud.com/%E5%9B%BE%E6%A0%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/1.jpg" alt="image text"><br><img src="https://tuchuang-1301263664.cos.ap-nanjing.myqcloud.com/%E5%9B%BE%E6%A0%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/2.jpg" alt="image text"><br><img src="" alt="image text"><br>修改主题配置文件下(themes/_config.yml)的menu，每一个路径后面加||然后加图标</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F;||home</span><br><span class="line">  # about: &#x2F;about&#x2F;||user</span><br><span class="line">  # tags: &#x2F;tags&#x2F;||tags</span><br><span class="line">  #categories: &#x2F;categories&#x2F; || th</span><br><span class="line">  archives: &#x2F;archives&#x2F;||archive</span><br><span class="line">  top: &#x2F;top&#x2F;||signal</span><br><span class="line">  links: &#x2F;links&#x2F;||user-plus</span><br><span class="line">  #schedule: &#x2F;schedule&#x2F; || calendar</span><br><span class="line">  # books: &#x2F;books&#x2F;||book</span><br><span class="line">  messageboard: &#x2F;messageboard&#x2F; ||comment</span><br><span class="line">  #sitemap: &#x2F;sitemap.xml || sitemap</span><br><span class="line">  #commonweal: &#x2F;404&#x2F; || heartbeat</span><br><span class="line"></span><br><span class="line"># Enable&#x2F;Disable menu icons.</span><br><span class="line">menu_icons:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>
<p>注意: /与||之间是没有空格的!</p>
<h3 id="解决next主题下翻页按钮图标无法显示问题"><a href="#解决next主题下翻页按钮图标无法显示问题" class="headerlink" title="解决next主题下翻页按钮图标无法显示问题"></a>解决next主题下翻页按钮图标无法显示问题</h3><p>修改themes/layout/_partials/pagination.swig文件，直接改为&lt;与&gt;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;</span><br><span class="line">     paginator(&#123;</span><br><span class="line">       prev_text: &#39;&lt;&#39;,</span><br><span class="line">       next_text: &#39;&gt;&#39;,</span><br><span class="line">       mid_size: 1</span><br><span class="line">     &#125;)</span><br></pre></td></tr></table></figure>

<p>参考文章：<br><a href="https://www.cnblogs.com/xiejava/p/12456273.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiejava/p/12456273.html</a><br><a href="https://blog.csdn.net/qq_36852780/article/details/104657642" target="_blank" rel="noopener">https://blog.csdn.net/qq_36852780/article/details/104657642</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>解决hexo启动服务器后页面不显示</title>
    <url>/2020/05/01/%E8%A7%A3%E5%86%B3hexo-s%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="解决hexo启动服务器后页面不显示"><a href="#解决hexo启动服务器后页面不显示" class="headerlink" title="解决hexo启动服务器后页面不显示"></a>解决hexo启动服务器后页面不显示</h2><p>今天打开电脑修改hexo主题的样式，在启动hexo s后打开页面的时候发现页面根本打不开,查看任务管理后才发现端口被占用！！！挺小白的问题，是我太菜。</p>
<a id="more"></a>
<p>一般解决方法都是在window的cmd下输入下面的命令来查看占用端口的进程,然后去任务管理器的进程选项结束进程.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ netstat -ano|findestr 4000(端口名)</span><br></pre></td></tr></table></figure>
<p>查看了<a href="https://hexo.io/docs/server" target="_blank" rel="noopener">官网文档</a>的server用法后发现，<br>其实还有更简单的方法：</p>
<h3 id="方法1：使用-p选项可以设置不同的端口。再打开网页就大公告成了。"><a href="#方法1：使用-p选项可以设置不同的端口。再打开网页就大公告成了。" class="headerlink" title="方法1：使用-p选项可以设置不同的端口。再打开网页就大公告成了。"></a>方法1：使用-p选项可以设置不同的端口。再打开网页就大公告成了。</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server -p 5000</span><br></pre></td></tr></table></figure>


<h3 id="方法2：如果每次4000端口都被占用的话，方法一这样设置会很麻烦。所以直接在根目录下的配置文件-config-yml后直接配置端口："><a href="#方法2：如果每次4000端口都被占用的话，方法一这样设置会很麻烦。所以直接在根目录下的配置文件-config-yml后直接配置端口：" class="headerlink" title="方法2：如果每次4000端口都被占用的话，方法一这样设置会很麻烦。所以直接在根目录下的配置文件_config.yml后直接配置端口："></a>方法2：如果每次4000端口都被占用的话，方法一这样设置会很麻烦。所以直接在根目录下的配置文件_config.yml后直接配置端口：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 5000   <span class="comment">##端口号</span></span><br><span class="line">  compress: <span class="literal">true</span>   </span><br><span class="line">  header: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>注意：在使用完hexo s的时候，记得关闭，否则再另开启一个也会出现被占用的问题。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
