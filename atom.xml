<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小通</title>
  
  <subtitle>你终究会成为你正在成为的人，你的每一个选择都是来自你人生意义的诘问。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://howsyc.cn/"/>
  <updated>2020-05-05T12:05:16.111Z</updated>
  <id>https://howsyc.cn/</id>
  
  <author>
    <name>小通</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java对象流 EOFException异常</title>
    <link href="https://howsyc.cn/2020/05/05/EOFException/"/>
    <id>https://howsyc.cn/2020/05/05/EOFException/</id>
    <published>2020-05-05T12:03:24.000Z</published>
    <updated>2020-05-05T12:05:16.111Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue May 05 2020 20:06:16 GMT+0800 (GMT+08:00) --><p>这里描述的java.io.EOFException异常是在对象流（也就是ObjectInputStream，ObjectOutputStream）的使用过程中，抛出的。</p><a id="more"></a><p>什么是对象流？</p><p>对象流指的是可以直接把一个对象以流的形式传输给其他的介质，比如硬盘<br>一个对象以流的形式进行传输，叫做序列化。该对象所对应的类，必须是实现Serializable接口。<a href="https://how2j.cn/p/5689" target="_blank" rel="noopener">详细学习</a></p><p>如果你使用使用对象流那么必须配套使用,因为用对象流的方式写人文件，文件的开头会有序列头，就像协议一样，是规定好的。如下是用java写人的Hero对象(乱码了):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>        序列头     对象                数值<br> sr 瀵硅薄娴?Hero        I hpL namet Ljava/lang/String;xp  ht garen<br></code></pre></td></tr></table></figure><h3 id="对象流不同于普通的字节流，当对象流中没有数据时，程序却尝试读取异常，会报EOF错误；而字节流就不会出现这种情况，字节流会返回-1-。"><a href="#对象流不同于普通的字节流，当对象流中没有数据时，程序却尝试读取异常，会报EOF错误；而字节流就不会出现这种情况，字节流会返回-1-。" class="headerlink" title="对象流不同于普通的字节流，当对象流中没有数据时，程序却尝试读取异常，会报EOF错误；而字节流就不会出现这种情况，字节流会返回-1 。"></a>对象流不同于普通的字节流，当对象流中没有数据时，程序却尝试读取异常，会报EOF错误；而字节流就不会出现这种情况，字节流会返回-1 。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1. 初始化Object流语句</span><br>FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(file);<br>FileOututStream fos = <span class="hljs-keyword">new</span> FileOutputStream(file);<br>dis = <span class="hljs-keyword">new</span> ObjectInputStream(fis); <span class="hljs-comment">// 报错的就是这一行，第xx行</span><br>dos = <span class="hljs-keyword">new</span> ObjectOutputStream(fos);<br><br>java.io.EOFException<br>at java.io.ObjectInputStream$PeekInputStream.readFully(ObjectInputStream.java:<span class="hljs-number">2681</span>)<br>at java.io.ObjectInputStream$BlockDataInputStream.readShort(ObjectInputStream.java:<span class="hljs-number">3156</span>)<br>at java.io.ObjectInputStream.readStreamHeader(ObjectInputStream.java:<span class="hljs-number">862</span>)<br>at java.io.ObjectInputStream.&lt;init&gt;(ObjectInputStream.java:<span class="hljs-number">358</span>)<br>at Test.main(Test.java:xx行) <span class="hljs-comment">// 第xx行报错</span><br></code></pre></td></tr></table></figure><p>因为ObjectInputStream构造函数会从传入的InputStream来读取数据。首先会读取序列化流的头部(serialization stream header)并验证头部。此构造器会一直地”阻塞”，直到与之对应的ObjectOutputStream写入了序列化头部。(阻塞并不完全正确，详细见<a href="https://blog.csdn.net/qq_37206105/article/details/90461717" target="_blank" rel="noopener">Canliture</a>的文章)，</p><p>所以我们先实例化ObjectOutputStream，再实例化 ObjectInputStream，保证在在同一资源的对象流ObjectInputStream能够及时读取到序列化头而不至于阻塞或者引发EOF异常(阻塞对应于Socket IO，EOF异常对应于文件IO)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">dos = <span class="hljs-keyword">new</span> ObjectOutputStream(fos);<br>dis = <span class="hljs-keyword">new</span> ObjectInputStream(fis);<br></code></pre></td></tr></table></figure><h3 id="ObjectInputStream写入的数据，在ObjectOutputStream上读取时，应该按照相同的数据类型依次读取，否则数据类型不等会抛出EOFException"><a href="#ObjectInputStream写入的数据，在ObjectOutputStream上读取时，应该按照相同的数据类型依次读取，否则数据类型不等会抛出EOFException" class="headerlink" title="ObjectInputStream写入的数据，在ObjectOutputStream上读取时，应该按照相同的数据类型依次读取，否则数据类型不等会抛出EOFException"></a>ObjectInputStream写入的数据，在ObjectOutputStream上读取时，应该按照相同的数据类型依次读取，否则数据类型不等会抛出EOFException</h3><p>下文的错误把dis.readInt() 改为 dis.readObject()就能解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br> File f0 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">"kkk.out"</span>);<br> FileInputStream fis = <span class="hljs-keyword">null</span>;<br> FileOutputStream fos = <span class="hljs-keyword">null</span>;<br> ObjectInputStream dis = <span class="hljs-keyword">null</span>;<br> ObjectOutputStream dos = <span class="hljs-keyword">null</span>;<br> <span class="hljs-keyword">try</span>&#123;<br>     <span class="hljs-keyword">if</span>(!f0.exists())f0.createNewFile();<br><br>     fos = <span class="hljs-keyword">new</span> FileOutputStream(f0);<br>     fis = <span class="hljs-keyword">new</span> FileInputStream(f0);<br><br>     <span class="hljs-comment">// 1. 初始化Object流语句</span><br>     dis = <span class="hljs-keyword">new</span> ObjectInputStream(fis);<br>     dos = <span class="hljs-keyword">new</span> ObjectOutputStream(fos);<br><br>     <span class="hljs-comment">// 2. 写"对象"语句</span><br>     dos.writeInt(<span class="hljs-number">1</span>);                             <span class="hljs-comment">//异常处</span><br>     dos.writeObject(<span class="hljs-keyword">new</span> Integer(<span class="hljs-number">3</span>));         <br><br>     <span class="hljs-comment">// 3. 读取，输出语句</span><br>     System.out.println(dis.readInt() + <span class="hljs-string">","</span>+ dis.readInt());<br> &#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>     e.printStackTrace();<br>     <span class="hljs-keyword">if</span>(fos != <span class="hljs-keyword">null</span>) fos.close();<br>     <span class="hljs-keyword">if</span>(fis != <span class="hljs-keyword">null</span>) fis.close();<br>     <span class="hljs-keyword">if</span>(dos != <span class="hljs-keyword">null</span>) dos.close();<br>     <span class="hljs-keyword">if</span>(dis != <span class="hljs-keyword">null</span>) dis.close();<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>1.对象流不同于普通的字节流，当对象流中没有数据时，程序却尝试读取数据，会报EOFException；而字节流就不会出现这种情况，字节流会返回-1</p><p>2.ObjectInputStream写入的数据，在ObjectOutputStream上读取时，应该按照相同的数据类型依次读取，否则数据类型不等会抛出EOFException</p><p>3.最好在实际使用的过程中，我们先实例化ObjectOutputStream，再实例化 ObjectInputStream，这是由这两个类的设计思想所决定的。如此能保证在同一资源的对象流ObjectInputStream能够及时读取到序列化头而不至于阻塞或者引发EOF异常(阻塞对应于Socket IO，EOF异常对应于文件IO)</p><p>如果想从源码上了解问题请点击下放的原文链接</p><p>原文链接：<a href="https://blog.csdn.net/qq_37206105/article/details/90461717" target="_blank" rel="noopener">Canliture</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue May 05 2020 20:06:16 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;这里描述的java.io.EOFException异常是在对象流（也就是ObjectInputStream，ObjectOutputStream）的使用过程中，抛出的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://howsyc.cn/categories/java/"/>
    
    
      <category term="java" scheme="https://howsyc.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>解决next主题菜单栏显示问号</title>
    <link href="https://howsyc.cn/2020/05/01/nexttubiao/"/>
    <id>https://howsyc.cn/2020/05/01/nexttubiao/</id>
    <published>2020-04-30T18:05:59.000Z</published>
    <updated>2020-04-30T19:39:34.197Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue May 05 2020 20:06:16 GMT+0800 (GMT+08:00) --><p>菜单栏和翻页按钮小图标显示不出来的问题终于解决了。</p><a id="more"></a><h3 id="解决next主题菜单栏显示问号"><a href="#解决next主题菜单栏显示问号" class="headerlink" title="解决next主题菜单栏显示问号"></a>解决next主题菜单栏显示问号</h3><p><img src="https://tuchuang-1301263664.cos.ap-nanjing.myqcloud.com/%E5%9B%BE%E6%A0%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/1.jpg" alt="image text"><br><img src="https://tuchuang-1301263664.cos.ap-nanjing.myqcloud.com/%E5%9B%BE%E6%A0%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/2.jpg" alt="image text"><br><img src="" alt="image text"><br>修改主题配置文件下(themes/_config.yml)的menu，每一个路径后面加||然后加图标</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">menu:</span><br><span class="hljs-symbol">  home:</span> /||home<br>  <span class="hljs-meta"># about: /about/||user</span><br>  <span class="hljs-meta"># tags: /tags/||tags</span><br>  <span class="hljs-meta">#categories: /categories/ || th</span><br><span class="hljs-symbol">  archives:</span> <span class="hljs-meta-keyword">/archives/</span>||archive<br><span class="hljs-symbol">  top:</span> <span class="hljs-meta-keyword">/top/</span>||signal<br><span class="hljs-symbol">  links:</span> <span class="hljs-meta-keyword">/links/</span>||user-plus<br>  <span class="hljs-meta">#schedule: /schedule/ || calendar</span><br>  <span class="hljs-meta"># books: /books/||book</span><br><span class="hljs-symbol">  messageboard:</span> <span class="hljs-meta-keyword">/messageboard/</span> ||comment<br>  <span class="hljs-meta">#sitemap: /sitemap.xml || sitemap</span><br>  <span class="hljs-meta">#commonweal: /404/ || heartbeat</span><br><br><span class="hljs-meta"># Enable/Disable menu icons.</span><br><span class="hljs-symbol">menu_icons:</span><br><span class="hljs-symbol">  enable:</span> true<br></code></pre></td></tr></table></figure><p>注意: /与||之间是没有空格的!</p><h3 id="解决next主题下翻页按钮图标无法显示问题"><a href="#解决next主题下翻页按钮图标无法显示问题" class="headerlink" title="解决next主题下翻页按钮图标无法显示问题"></a>解决next主题下翻页按钮图标无法显示问题</h3><p>修改themes/layout/_partials/pagination.swig文件，直接改为&lt;与&gt;</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts">&#123;&#123;<br>     paginator(&#123;<br><span class="hljs-symbol">       prev_text:</span> <span class="hljs-string">'&lt;'</span>,<br><span class="hljs-symbol">       next_text:</span> <span class="hljs-string">'&gt;'</span>,<br><span class="hljs-symbol">       mid_size:</span> <span class="hljs-number">1</span><br>     &#125;)<br></code></pre></td></tr></table></figure><p>参考文章：<br><a href="https://www.cnblogs.com/xiejava/p/12456273.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiejava/p/12456273.html</a><br><a href="https://blog.csdn.net/qq_36852780/article/details/104657642" target="_blank" rel="noopener">https://blog.csdn.net/qq_36852780/article/details/104657642</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue May 05 2020 20:06:16 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;菜单栏和翻页按钮小图标显示不出来的问题终于解决了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://howsyc.cn/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://howsyc.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>解决hexo启动服务器后页面不显示</title>
    <link href="https://howsyc.cn/2020/05/01/%E8%A7%A3%E5%86%B3hexo-s%E9%97%AE%E9%A2%98/"/>
    <id>https://howsyc.cn/2020/05/01/%E8%A7%A3%E5%86%B3hexo-s%E9%97%AE%E9%A2%98/</id>
    <published>2020-04-30T16:37:02.150Z</published>
    <updated>2020-05-05T06:03:28.547Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue May 05 2020 20:06:16 GMT+0800 (GMT+08:00) --><h2 id="解决hexo启动服务器后页面不显示"><a href="#解决hexo启动服务器后页面不显示" class="headerlink" title="解决hexo启动服务器后页面不显示"></a>解决hexo启动服务器后页面不显示</h2><p>今天打开电脑修改hexo主题的样式，在启动hexo s后打开页面的时候发现页面根本打不开,查看任务管理后才发现端口被占用！！！挺小白的问题，是我太菜。</p><a id="more"></a><p>一般解决方法都是在window的cmd下输入下面的命令来查看占用端口的进程,然后去任务管理器的进程选项结束进程.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ netstat -ano|findestr 4000(端口名)<br></code></pre></td></tr></table></figure><p>查看了<a href="https://hexo.io/docs/server" target="_blank" rel="noopener">官网文档</a>的server用法后发现，<br>其实还有更简单的方法：</p><h3 id="方法1：使用-p选项可以设置不同的端口。再打开网页就大公告成了。"><a href="#方法1：使用-p选项可以设置不同的端口。再打开网页就大公告成了。" class="headerlink" title="方法1：使用-p选项可以设置不同的端口。再打开网页就大公告成了。"></a>方法1：使用-p选项可以设置不同的端口。再打开网页就大公告成了。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server -p 5000<br></code></pre></td></tr></table></figure><h3 id="方法2：如果每次4000端口都被占用的话，方法一这样设置会很麻烦。所以直接在根目录下的配置文件-config-yml后直接配置端口："><a href="#方法2：如果每次4000端口都被占用的话，方法一这样设置会很麻烦。所以直接在根目录下的配置文件-config-yml后直接配置端口：" class="headerlink" title="方法2：如果每次4000端口都被占用的话，方法一这样设置会很麻烦。所以直接在根目录下的配置文件_config.yml后直接配置端口："></a>方法2：如果每次4000端口都被占用的话，方法一这样设置会很麻烦。所以直接在根目录下的配置文件_config.yml后直接配置端口：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">server:<br>  port: 5000   <span class="hljs-comment">##端口号</span><br>  compress: <span class="hljs-literal">true</span>   <br>  header: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>注意：在使用完hexo s的时候，记得关闭，否则再另开启一个也会出现被占用的问题。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue May 05 2020 20:06:16 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;解决hexo启动服务器后页面不显示&quot;&gt;&lt;a href=&quot;#解决hexo启动服务器后页面不显示&quot; class=&quot;headerlink&quot; title=&quot;解决hexo启动服务器后页面不显示&quot;&gt;&lt;/a&gt;解决hexo启动服务器后页面不显示&lt;/h2&gt;&lt;p&gt;今天打开电脑修改hexo主题的样式，在启动hexo s后打开页面的时候发现页面根本打不开,查看任务管理后才发现端口被占用！！！挺小白的问题，是我太菜。&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://howsyc.cn/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://howsyc.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>本站换域名啦(公告)</title>
    <link href="https://howsyc.cn/2020/04/27/howsyc/"/>
    <id>https://howsyc.cn/2020/04/27/howsyc/</id>
    <published>2020-04-26T20:33:11.000Z</published>
    <updated>2020-04-26T20:37:09.632Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue May 05 2020 20:06:16 GMT+0800 (GMT+08:00) --><p>本站已换成howsyc.cn的新域名,how=好，syc=四叶草,象征着幸运,总得来说=好幸运。就是进入本站的朋友们都会被幸运女神保佑，气运十足，如果是学生考试加分等，如果是工作者一切顺利，早日涨薪，如果…..emmm编不下去了(滑稽)。祝每一位来到本站的朋友幸福快乐！旧域名mykindle.xyz点击后会自动跳转到新域名,换域名是因为听说小姨子后缀百度收录不太好，所以就直接换了,菜鸡小站希望以后有点收录，感谢来访的朋友们，呜呜呜底部的底部的访客数清空了。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue May 05 2020 20:06:16 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;本站已换成howsyc.cn的新域名,how=好，syc=四叶草,象征着幸运,总得来说=好幸运。就是进入本站的朋友们都会被幸运女神保佑，气运十足
      
    
    </summary>
    
    
    
      <category term="博客" scheme="https://howsyc.cn/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>cos对象存储拒绝访问解决方法（腾讯云）</title>
    <link href="https://howsyc.cn/2020/04/25/cosnew/"/>
    <id>https://howsyc.cn/2020/04/25/cosnew/</id>
    <published>2020-04-25T10:30:48.000Z</published>
    <updated>2020-05-05T06:02:49.404Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue May 05 2020 20:06:16 GMT+0800 (GMT+08:00) --><p>昨天一直在图床的测试，然后访问的时候一直提示Access Denied，emmm我太菜了。当时因为我看不懂英HHHHH。直接百度了.cors跨域访问也设置了,访问权限公有读也设置了,为什么还不能访问呢？</p><a id="more"></a><p><img src="https://tuchuang-1301263664.cos.ap-nanjing.myqcloud.com/cos%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/1.jpg" alt="Images text"><br><img src="https://tuchuang-1301263664.cos.ap-nanjing.myqcloud.com/cos%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/2.jpg" alt="Images text"><br><img src="https://tuchuang-1301263664.cos.ap-nanjing.myqcloud.com/cos%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/3.jpg" alt="images text"></p><p>经过广大的网友大佬们的帮助找到了问题1如果你没有在基础配置里设置防盗链,或者权限里面设置Policy权限,访问对象链接就会报错Access Denied,没有权限。设置方法可以官网给的提示。<br><img src="https://tuchuang-1301263664.cos.ap-nanjing.myqcloud.com/cos%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/4.jpg" alt="image text"><br><img src="https://tuchuang-1301263664.cos.ap-nanjing.myqcloud.com/cos%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/5.jpg" alt="image text"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue May 05 2020 20:06:16 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;昨天一直在图床的测试，然后访问的时候一直提示Access Denied，emmm我太菜了。当时因为我看不懂英HHHHH。直接百度了.cors跨域访问也设置了,访问权限公有读也设置了,为什么还不能访问呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="博客" scheme="https://howsyc.cn/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="cos" scheme="https://howsyc.cn/tags/cos/"/>
    
  </entry>
  
  <entry>
    <title>java标识符的命名规范</title>
    <link href="https://howsyc.cn/2020/04/24/%E6%A0%87%E8%AF%86%E7%AC%A6/"/>
    <id>https://howsyc.cn/2020/04/24/%E6%A0%87%E8%AF%86%E7%AC%A6/</id>
    <published>2020-04-23T16:55:43.926Z</published>
    <updated>2020-05-01T17:45:20.438Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue May 05 2020 20:06:16 GMT+0800 (GMT+08:00) --><p>java标识符的命名规范<br>（规范是程序员的基本准则,不规范会直接损害你的个人形象）</p><a id="more"></a><h3 id="变量和常量命名规范"><a href="#变量和常量命名规范" class="headerlink" title="变量和常量命名规范"></a>变量和常量命名规范</h3><p>所有变量、方法、类名：见名知意<br>类成员变量：首字母小写和驼峰原则（monthSalary）<br>局部变量：首字母小写和驼峰原则<br>常量：大写字母和下划线:MAX_VALUE<br>类名：首字母大写和驼峰原则（Man,GoodMan）<br>方法名：首字母小写和驼峰原则:run(),runRun()<br>//变量本质上就是代表一个“可操作的存储空间”，空间位置是确定的，但是里面放置什么值不确定。我们可通过变量名来访问“对应的存储空间”，<br>//从而操纵这个“存储空间”存储的值。<br>//java是一种强制 型语言，每个变量都必须声明其书局类型。变量的数据类型决定了变量占据存储空间的大小。比如 int a = 3; 表示a变量的空间大小为4个字节</p><h3 id="标识符的命名规则："><a href="#标识符的命名规则：" class="headerlink" title="标识符的命名规则："></a>标识符的命名规则：</h3><p>标识符必须以字母、下划线_、美元符号$开头。<br>标识符其它部分可以是字母、下划线“_”、美元符“$”和数字的任意组合。<br>Java 标识符大小写敏感，且长度无限制。<br>标识符不可以是Java的关键字。<br><a href="https://www.sxt.cn/Java_jQuery_in_action/Java_Identifier.html" target="_blank" rel="noopener">原文来源</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue May 05 2020 20:06:16 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;java标识符的命名规范&lt;br&gt;（规范是程序员的基本准则,不规范会直接损害你的个人形象）&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://howsyc.cn/categories/java/"/>
    
    
      <category term="java" scheme="https://howsyc.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java运算符的优先级</title>
    <link href="https://howsyc.cn/2020/04/24/java%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://howsyc.cn/2020/04/24/java%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2020-04-23T16:55:43.921Z</published>
    <updated>2020-05-05T05:59:52.131Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue May 05 2020 20:06:16 GMT+0800 (GMT+08:00) --><p>java运算符的优先级</p><a id="more"></a><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">优先级运算符类结合性<br>1()括号运算符由左至右<br>2!、+（正号）、-（负号）一元运算符由左至右<br>2~位逻辑运算符由右至左<br>2++、--递增与递减运算符由右至左<br>3*、/、%算术运算符由左至右<br>4+、-算术运算符由左至右<br>5&lt;&lt;、&gt;&gt;位左移、右移运算符由左至右<br>6&gt;、&gt;=、&lt;、&lt;=关系运算符由左至右<br>7==、!=关系运算符由左至右<br>8&amp;位运算符、逻辑运算符由左至右<br>9^位运算符、逻辑运算符由左至右<br>10|位运算符、逻辑运算符由左至右<br>11&amp;&amp;逻辑运算符由左至右<br>12||逻辑运算符由左至右<br>13<br>? :条件运算符由右至左<br>14=、+=、-=、*=、/=、%=赋值运算符、扩展运算符由右至左<br></code></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Bash">运算符说明<br>逻辑与&amp;( 与)两个操作数为<span class="hljs-literal">true</span>，结果才是<span class="hljs-literal">true</span>，否则是<span class="hljs-literal">false</span><br>逻辑或|(或)两个操作数有一个是<span class="hljs-literal">true</span>，结果就是<span class="hljs-literal">true</span><br>短路与&amp;&amp;( 与)只要有一个为<span class="hljs-literal">false</span>，则直接返回<span class="hljs-literal">false</span><br>短路或||(或)只要有一个为<span class="hljs-literal">true</span>， 则直接返回<span class="hljs-literal">true</span><br>逻辑非!（非）取反：!<span class="hljs-literal">false</span>为<span class="hljs-literal">true</span>，!<span class="hljs-literal">true</span>为<span class="hljs-literal">false</span><br>逻辑异或^（异或）相同为<span class="hljs-literal">false</span>，不同为<span class="hljs-literal">true</span><br>Integer.toBinaryString         一个整数的二进制表达<br>&lt;&lt;左移<br>&gt;&gt;右移<br>&gt;&gt;&gt;                         带符号右移与无符号右移<br></code></pre></td></tr></table></figure><h3 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h3><p>语法格式：<br>1 x ? y : z<br>其中 x 为 boolean 类型表达式，先计算 x 的值，若为true，则整个运算的结果为表达式 y 的值，否则整个运算结果为表达式 z 的值。</p><h3 id="带符号右移-gt-gt"><a href="#带符号右移-gt-gt" class="headerlink" title="带符号右移 &gt;&gt;"></a>带符号右移 &gt;&gt;</h3><p>对于正数， 带符号右移 &gt;&gt; 会把所有的位右移，并在最前面补0<br>对于负数， 带符号右移 &gt;&gt; 会把所有的位右移，并在最前面补1</p><h3 id="无符号右移-gt-gt-gt"><a href="#无符号右移-gt-gt-gt" class="headerlink" title="无符号右移&gt;&gt;&gt;"></a>无符号右移&gt;&gt;&gt;</h3><p>如果是一个负数，那么对应的二进制的第一位是1<br>无符号右移&gt;&gt;&gt;会把第一位的1也向右移动，导致移动后，第一位变成0<br>这样就会使得负数在无符号右移后，得到一个正数</p><h3 id="自增-自减"><a href="#自增-自减" class="headerlink" title="自增 自减"></a>自增 自减</h3><p>++ –<br>i++ 先赋值再自增<br>++i先自增再赋值</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue May 05 2020 20:06:16 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;java运算符的优先级&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://howsyc.cn/categories/java/"/>
    
    
      <category term="java" scheme="https://howsyc.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java数组</title>
    <link href="https://howsyc.cn/2020/04/24/java%E6%95%B0%E7%BB%84%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://howsyc.cn/2020/04/24/java%E6%95%B0%E7%BB%84%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-04-23T16:55:43.919Z</published>
    <updated>2020-05-05T06:00:23.244Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue May 05 2020 20:06:16 GMT+0800 (GMT+08:00) --><p>数组，以及Arrays.方法的使用</p><a id="more"></a><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="创建数组的时候，要指明数组的长度。"><a href="#创建数组的时候，要指明数组的长度。" class="headerlink" title="创建数组的时候，要指明数组的长度。"></a>创建数组的时候，要指明数组的长度。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Bash">int a [ ] = new int[5] ; //分配了长度是5的数组，但是没有赋值<br>a[4]=100; //下标4，实质上是“第5个”，即最后一个<br>a[5]=101; //下标5，实质上是“第6个”，超出范围 ,产生数组下标越界异<br><br>int[] a = new int[]&#123;100,102,444,836,3236&#125;;//写法一: 分配空间同时赋值<br>int[] b = &#123;100,102,444,836,3236&#125;;//写法二： 省略了new int[],效果一样<br><br>//写法三：同时分配空间，和指定内容<br>//在这个例子里，长度是3，内容是5个，产生矛盾了<br>//所以如果指定了数组的内容，就不能同时设置数组的长度<br> int[] c = new int[3]&#123;100,102,444,836,3236&#125;;<br></code></pre></td></tr></table></figure><h3 id="引用概念："><a href="#引用概念：" class="headerlink" title="引用概念："></a>引用概念：</h3><p>如果变量代表一个数组，比如a,我们把a叫做引用<br>与基本类型不同</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> c = <span class="hljs-number">5</span>; 这叫给c赋值为<span class="hljs-number">5</span> <br>声明一个引用 <span class="hljs-built_in">int</span>[] a; <br>a = new <span class="hljs-built_in">int</span>[<span class="hljs-number">5</span>]; <br>让a这个引用，指向数组<br>常<br></code></pre></td></tr></table></figure><h3 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h3><p>选择法排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; a.length-<span class="hljs-number">1</span>; j++) &#123;<span class="hljs-comment">//外层循环一次，</span><br>因为最后一次剩下的就是最大的所以循环次数-<span class="hljs-number">1</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = j+<span class="hljs-number">1</span>; i &lt; a.length; i++) &#123;<span class="hljs-comment">//内层会全部循环一次</span><br>    <span class="hljs-keyword">if</span>(a[i]&lt;a[j])&#123; <span class="hljs-comment">//如果然后的数小于前面的就换位 </span><br>      <span class="hljs-keyword">int</span> temp = a[j];<br>     a[j] = a[i];<br>     a[i] = temp;<br>            &#125;<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>冒泡法排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; a.length; j++) &#123;<span class="hljs-comment">//</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; a.length-j-<span class="hljs-number">1</span>; i++) &#123;<span class="hljs-comment">//-1防止数组下标越界</span><br><span class="hljs-comment">//-j是因为每内循环一次，最大的就放在后面了，就不需要比较了</span><br>    <span class="hljs-keyword">if</span>(a[i]&gt;a[i+<span class="hljs-number">1</span>])&#123; <span class="hljs-comment">//如果前面的大于后面的就互换 </span><br>     <span class="hljs-keyword">int</span> temp = a[i];<br>     a[i] = a[i+<span class="hljs-number">1</span>];<br>     a[i+<span class="hljs-number">1</span>] = temp;<br>              &#125;<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="增强型for循环遍历"><a href="#增强型for循环遍历" class="headerlink" title="增强型for循环遍历"></a>增强型for循环遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> [] values = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> each : values) &#123;<br>   System.out.println(each);<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="复制数组："><a href="#复制数组：" class="headerlink" title="复制数组："></a>复制数组：</h3><p>把一个数组的值，复制到另一个数组中<br>System.arraycopy(src, srcPos, dest, destPos, length)<br>src: 源数组<br>srcPos: 从源数组复制数据的起始位置<br>dest: 目标数组<br>destPos: 复制到目标数组的起始位置<br>length: 复制的长度</p><p>这是一个二维数组，里面的每一个元素，都是一个一维数组<br>所以二维数组又叫数组的数组<br>int b[][] = new int[][]{<br>{1,2,3},<br>{4,5,6},<br>{7,8,9}<br>};</p><h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><p>Arrays是针对数组的工具类，可以进行 排序，查找，复制填充等功能。 大大提高了开发人员的工作效率。</p><h3 id="copyOfRange-数组复制"><a href="#copyOfRange-数组复制" class="headerlink" title="copyOfRange    数组复制"></a>copyOfRange 数组复制</h3><p>与使用System.arraycopy进行数组复制类似的，Arrays提供了一个copyOfRange方法进行数组复制。<br>// copyOfRange(int[] original, int from, int to)<br>// 第一个参数表示源数组<br>// 第二个参数表示开始位置(取得到)<br>// 第三个参数表示结束位置(取不到)</p><h3 id="toString-转换为字符串"><a href="#toString-转换为字符串" class="headerlink" title="toString()    转换为字符串"></a>toString() 转换为字符串</h3><p>//int a[] = new int[] { 18, 62, 68, 82, 65, 9 };<br>//String content = Arrays.toString(a);<br>sort 排序<br>在前面章节学习了 选择法排序 和 冒泡法排序，Arrays工具类提供了一个sort方法，只需要一行代码即可完成排序功能。</p><h3 id="Arrays-sort-a"><a href="#Arrays-sort-a" class="headerlink" title="Arrays.sort(a);"></a>Arrays.sort(a);</h3><p>binarySearch 搜索<br>//使用binarySearch之前，必须先使用sort进行排序<br>//如果数组中有多个相同的元素，查找的结果是不确定的<br>int a[] = new int[] { 18, 62, 68, 82, 65, 9 };<br>Arrays.sort(a);<br>System.out.println(“数字 62出现的位置:”+Arrays.binarySearch(a, 62));</p><h3 id="equals-判断是否相同"><a href="#equals-判断是否相同" class="headerlink" title="equals    判断是否相同"></a>equals 判断是否相同</h3><p>//比较两个数组的内容是否一样<br>System.out.println(Arrays.equals(a, b));</p><h3 id="fill-填充"><a href="#fill-填充" class="headerlink" title="fill    填充"></a>fill 填充</h3><p>//使用同一个值，填充整个数组<br>int a[] = new int[10];<br>Arrays.fill(a, 5);</p><h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 练习-二维数组排序</span><br><span class="hljs-comment"> * 首先定义一个5*8的二维数组，然后使用随机数填充满</span><br><span class="hljs-comment"> * 借助Arrays的方法对二维数组进行排序</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Exercise_TwoDimensionSort</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">int</span> a[][] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">5</span>][<span class="hljs-number">8</span>];<br><span class="hljs-keyword">int</span> []b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span> [<span class="hljs-number">40</span>];<span class="hljs-comment">//这里必须赋值</span><br><span class="hljs-comment">//int b = (int)(Math.random()*100);</span><br><span class="hljs-comment">//Arrays.fill(a, b);  二维不能填充；</span><br>System.out.println(<span class="hljs-string">"排序前："</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;<span class="hljs-number">5</span>; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;<span class="hljs-number">8</span>; j++) &#123;<br>a[i][j] =(<span class="hljs-keyword">int</span>)(Math.random()*<span class="hljs-number">100</span>);<span class="hljs-comment">//给二维数组赋值；</span><br>System.out.print(+a[i][j]+<span class="hljs-string">"\t"</span>);<br>&#125;<br>System.out.println();<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;<span class="hljs-number">5</span>; i++) &#123;<br><br>System.arraycopy(a[i], <span class="hljs-number">0</span>, b, i*<span class="hljs-number">8</span>, a[i].length);<br><br>&#125;<br>Arrays.sort(b);<br>System.out.println(<span class="hljs-string">"排序后："</span>+Arrays.toString(b));<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>System.arraycopy(b, i*<span class="hljs-number">8</span>, a[i],<span class="hljs-number">0</span>,<span class="hljs-number">8</span>);<br>&#125;<br><br>System.out.println(<span class="hljs-string">"新的二维数组："</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;<span class="hljs-number">5</span>; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">8</span>; j++) &#123;<br>System.out.print(a[i][j]+<span class="hljs-string">"\t"</span>);<br>&#125;<br>System.out.println();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://how2j.cn/p/5505" target="_blank" rel="noopener">原文来源</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue May 05 2020 20:06:16 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;数组，以及Arrays.方法的使用&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://howsyc.cn/categories/java/"/>
    
    
      <category term="java" scheme="https://howsyc.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java数据类型</title>
    <link href="https://howsyc.cn/2020/04/24/java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://howsyc.cn/2020/04/24/java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2020-04-23T16:55:43.916Z</published>
    <updated>2020-05-05T06:02:23.747Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue May 05 2020 20:06:16 GMT+0800 (GMT+08:00) --><p>java的数据类型可分为两大类：<br>基本数据类型（primitive data type）和引用数据类型（referece data type)</p><a id="more"></a><h3 id="基本数据类型（primitive-data-type）："><a href="#基本数据类型（primitive-data-type）：" class="headerlink" title="基本数据类型（primitive data type）："></a>基本数据类型（primitive data type）：</h3><p>-整数类型（byte short int long）<br>型(java语言的整型常数默认为int型，声明long型常量可以后加 ‘l’或’L’)<br>浮点类型(float double)<br>字符型（char）<br>布尔型(boolean)</p><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><p>类（class）(String是引用类型)<br>接口(interface)<br>数组</p><p>$ //引用数据类型的大小统一为4个字节,记录的是其引用对象的地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Bash">类型占用存储空间                            表示范围<br>byte1字节（=8位=2⑻=256字）-2⑺~2⑺-1（-128~127)<br>short2字节-2⒂~2⒂-1(-32768~32767)<br>int4字节-2*(31幂)~2*(31幂)（-2127283648~2147483647）（约21亿）<br>long8字节-2*(63)~2*(63)-1<br>char2字节<br>boolean1位<br><span class="hljs-built_in">float</span>4字节<br>double8字节<br></code></pre></td></tr></table></figure><p>基本数据类型的类型转换可分为：<br>自动类型转换：容量小的数据类型可以自动转换为容量大的数据类型<br>强制类型转换：用于显式的转换一个数值的类型，语法格式：(type)var</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue May 05 2020 20:06:16 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;java的数据类型可分为两大类：&lt;br&gt;基本数据类型（primitive data type）和引用数据类型（referece data type)&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://howsyc.cn/categories/java/"/>
    
    
      <category term="java" scheme="https://howsyc.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>控制语句</title>
    <link href="https://howsyc.cn/2020/04/24/java%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B/"/>
    <id>https://howsyc.cn/2020/04/24/java%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B/</id>
    <published>2020-04-23T16:55:43.914Z</published>
    <updated>2020-05-05T06:00:57.924Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue May 05 2020 20:06:16 GMT+0800 (GMT+08:00) --><p>控制语句在基础中还是比较重要，还带那么一点有趣</p><a id="more"></a><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><h3 id="选择结构："><a href="#选择结构：" class="headerlink" title="选择结构："></a>选择结构：</h3><p>if单选泽结构<br>if-else 双选择结构<br>if-else if - else多选择结构<br>switch结构</p><h3 id="循环结构："><a href="#循环结构：" class="headerlink" title="循环结构："></a>循环结构：</h3><p>while循环<br>do-while循环（先执行再判断，为true继续执行，否则停止）<br>for循环（初始化声明的变量作用域为整个for循环体内，在循环体外无法访问）<br>嵌套循环（ 在一个循环语句内部再嵌套一个或多个循环，称为嵌套循环。<br>while、do-while与for循环可以任意嵌套多层。）<br>break和continue语句<br>带标签的break和continue</p><h3 id="下面是几个控制语句的例题"><a href="#下面是几个控制语句的例题" class="headerlink" title="下面是几个控制语句的例题"></a>下面是几个控制语句的例题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">* 复利公式：<br>F = p* ( (<span class="hljs-number">1</span>+r)^n );<br>F 最终收入 p 本金 r 年利率 n 存了多少年<br> */<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Millionaire</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">int</span> p = <span class="hljs-number">1000</span>,n;<br><span class="hljs-keyword">float</span> r = <span class="hljs-number">0.2F</span>;<br><span class="hljs-keyword">int</span> F=<span class="hljs-number">0</span>  ;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; F&lt;=<span class="hljs-number">100000</span>; i++) &#123;<br>F=(<span class="hljs-keyword">int</span>) (p*((r/<span class="hljs-number">12</span>)+<span class="hljs-number">1</span>));<br>p+=<span class="hljs-number">1000</span>;<br><span class="hljs-keyword">if</span> (F&gt;=<span class="hljs-number">100000</span>) &#123;<br>n=i/<span class="hljs-number">12</span>;<br>System.out.println(n);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java">* 黄金分割点：<br> * 寻找某两个数相除，其结果 离黄金分割点 <span class="hljs-number">0.618</span>最近<br>分母和分子不能同时为偶数<br>分母和分子 取值范围在[<span class="hljs-number">1</span>-<span class="hljs-number">20</span>]<br> */<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GoldSenectionRatio</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// 寻找某两个数相除，其结果 离黄金分割点 0.618最近</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">// 分母和分子不能同时为偶数</span><br>        <span class="hljs-comment">// 分母和分子 取值范围在[1-20]</span><br>        <span class="hljs-keyword">int</span> range = <span class="hljs-number">20</span>; <span class="hljs-comment">// 取值范围</span><br>        <span class="hljs-keyword">float</span> breakPoint = <span class="hljs-number">0.618f</span>; <span class="hljs-comment">// 黄金分割点</span><br> <br>        <span class="hljs-keyword">float</span> minDiff = <span class="hljs-number">100</span>; <span class="hljs-comment">// 离黄金分割点的差值</span><br>        <span class="hljs-keyword">int</span> answerFenzi = <span class="hljs-number">0</span>; <span class="hljs-comment">// 找到的分子</span><br>        <span class="hljs-keyword">int</span> answerFenmu = <span class="hljs-number">0</span>; <span class="hljs-comment">// 找到的分母</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> fenzi = <span class="hljs-number">1</span>; fenzi &lt;= range; fenzi++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> fenmu = <span class="hljs-number">1</span>; fenmu &lt;= range; fenmu++) &#123;<br>                <span class="hljs-comment">// 分母和分子不能同时为偶数</span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == fenzi % <span class="hljs-number">2</span> &amp; <span class="hljs-number">0</span> == fenmu % <span class="hljs-number">2</span>)<br>                    <span class="hljs-keyword">continue</span>;<br> <br>                <span class="hljs-comment">// 取值</span><br>                <span class="hljs-keyword">float</span> value = (<span class="hljs-keyword">float</span>) fenzi / fenmu;<br>                <span class="hljs-comment">// 取离黄金分割点的差值</span><br>                <span class="hljs-keyword">float</span> diff = value - breakPoint;<br>                <span class="hljs-comment">// 绝对值</span><br>                diff = diff &lt; <span class="hljs-number">0</span> ? <span class="hljs-number">0</span> - diff : diff;<br> <br><span class="hljs-comment">//                 找出最小的差值</span><br>                <span class="hljs-keyword">if</span> (diff &lt; minDiff) &#123;<br>                    minDiff = diff;<br>                    answerFenzi = fenzi;<br>                    answerFenmu = fenmu;<br>                &#125;<br>            &#125;<br>        &#125;<br> <br>        System.out.println(<span class="hljs-string">"离黄金分割点("</span> + breakPoint + <span class="hljs-string">")最近的两个数相除是:"</span> + answerFenzi + <span class="hljs-string">"/"</span> + answerFenmu + <span class="hljs-string">"="</span><br>                + ((<span class="hljs-keyword">float</span>) answerFenzi / answerFenmu));<br> <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-comment">/*计算数的阶乘*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Factorial</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br> Scanner s = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        System.out.println(<span class="hljs-string">"请输入一个整数："</span>);<br>        <span class="hljs-keyword">int</span> n = s.nextInt();<br>        <span class="hljs-keyword">int</span> fac = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(n&gt;=<span class="hljs-number">1</span>)&#123;<br>            fac *=n;<br>            n--;<br>        &#125;<br>        System.out.println(<span class="hljs-string">"阶乘是:"</span> + fac);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*水仙花数定义：</span><br><span class="hljs-comment">1. 一定是3位数</span><br><span class="hljs-comment">2. 每一位的立方，加起来恰好是这个数本身，比如153=1*1*1+5*5*5+3*3*3</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Daffodil</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">int</span> daffodil;<br>System.out.println(<span class="hljs-string">"打印所有的水仙花数："</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>; a &lt; <span class="hljs-number">10</span>; a++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>; b &lt; <span class="hljs-number">10</span>; b++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> c = <span class="hljs-number">0</span>; c &lt; <span class="hljs-number">10</span>; c++) &#123;<br><span class="hljs-keyword">if</span> (a*<span class="hljs-number">100</span>+b*<span class="hljs-number">10</span>+c == (a*a*a)+(b*b*b)+(c*c*c)&amp;&amp;a*<span class="hljs-number">100</span>+b*<span class="hljs-number">10</span>+c&gt;<span class="hljs-number">99</span>) &#123;<br>daffodil =a*<span class="hljs-number">100</span>+b*<span class="hljs-number">10</span>+c;<br>System.out.println(daffodil);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://how2j.cn/p/5504" target="_blank" rel="noopener">例题来源</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue May 05 2020 20:06:16 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;控制语句在基础中还是比较重要，还带那么一点有趣&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://howsyc.cn/categories/java/"/>
    
    
      <category term="java" scheme="https://howsyc.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>hexo添加rss订阅功能</title>
    <link href="https://howsyc.cn/2020/04/24/hexo%E6%B7%BB%E5%8A%A0rss%E8%AE%A2%E9%98%85%E5%8A%9F%E8%83%BD/"/>
    <id>https://howsyc.cn/2020/04/24/hexo%E6%B7%BB%E5%8A%A0rss%E8%AE%A2%E9%98%85%E5%8A%9F%E8%83%BD/</id>
    <published>2020-04-23T16:55:43.912Z</published>
    <updated>2020-04-23T16:55:44.101Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue May 05 2020 20:06:16 GMT+0800 (GMT+08:00) --><p>hexo如何添加rss功能呢？</p><a id="more"></a><h3 id="rss包"><a href="#rss包" class="headerlink" title="rss包"></a>rss包</h3><p>在hexojs下有一个hexo-generator-feed的npm包,用来实现订阅功能<br>首先安装这个包</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> hexo-generator-feed<br></code></pre></td></tr></table></figure><p>安装成功后在themes的主题配置文件_config.yml下配置该插件</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><br><span class="hljs-symbol">feed:</span><br><span class="hljs-symbol">    type:</span> atom<br><span class="hljs-symbol">    path:</span> atom.xml<br><span class="hljs-symbol">    limit:</span> <span class="hljs-number">20</span><br><span class="hljs-symbol">    hub:</span><br><span class="hljs-symbol">    content:</span><br><span class="hljs-symbol">    content_limit:</span><br><span class="hljs-symbol">    content_limit_delim:</span> <span class="hljs-string">' '</span><br></code></pre></td></tr></table></figure><p>参数的含义：</p><p>type: RSS的类型(atom/rss2)</p><p>path: 文件路径,默认是atom.xml/rss2.xml</p><p>limit: 展示文章的数量,使用0或则false代表展示全部</p><p>hub:</p><p>content: 在RSS文件中是否包含内容 ,有3个值 true/false默认不填为false</p><p>content_limit: 指定内容的长度作为摘要,仅仅在上面content设置为false和没有自定义的描述出现<br>content_limit_delim: 上面截取描述的分隔符,截取内容是以指定的这个分隔符作为截取结束的标志.在达到规定的内容长度之前最后出现的这个分隔符之前的内容,，防止从中间截断.</p><h5 id="如果是next主题可以实现另一种方法："><a href="#如果是next主题可以实现另一种方法：" class="headerlink" title="如果是next主题可以实现另一种方法："></a>如果是next主题可以实现另一种方法：</h5><p>在主题的config.yml文件下找到</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">rss:</span><br></code></pre></td></tr></table></figure><p>直接设置为true就可以了</p><p>配置完成后直接在根目录下运行hexo g<br>就会在你博客的pubilc 文件夹下发现atom.xml文件了</p><p>参考文章：<a href="https://blog.csdn.net/weixin_34292287/article/details/88931060" target="_blank" rel="noopener">https://blog.csdn.net/weixin_34292287/article/details/88931060</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue May 05 2020 20:06:16 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;hexo如何添加rss功能呢？&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="hexo" scheme="https://howsyc.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo的使用</title>
    <link href="https://howsyc.cn/2020/04/24/hexo-%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://howsyc.cn/2020/04/24/hexo-%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-04-23T16:55:43.909Z</published>
    <updated>2020-05-05T06:02:15.220Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue May 05 2020 20:06:16 GMT+0800 (GMT+08:00) --><p>记录一些我学到hexo命令</p><a id="more"></a><h2 id="Hexo学到的东西"><a href="#Hexo学到的东西" class="headerlink" title="Hexo学到的东西"></a>Hexo学到的东西</h2><h3 id="hexo命令1-本地部署"><a href="#hexo命令1-本地部署" class="headerlink" title="hexo命令1-本地部署"></a>hexo命令1-本地部署</h3><pre><code class="bash">$ hexo init &lt;folder&gt; <span class="comment">#init是初始化一个hexo文件夹</span></code></pre><pre><code class="bash">$ <span class="built_in">cd</span> &lt;folder&gt;  <span class="comment">#注意一定要打开文件夹才能进行部署</span></code></pre><pre><code class="bash">$ npm install    <span class="comment">#部署之前进行安装</span></code></pre><pre><code class="bash">$ hexo g   <span class="comment">#生成静态网页</span></code></pre><pre><code class="bash">$ hexo s      <span class="comment">#启动服务器 启动之后会默认给一个网址进去就是我们部署的网页了</span></code></pre><h3 id="更换hexo主题"><a href="#更换hexo主题" class="headerlink" title="更换hexo主题"></a>更换hexo主题</h3><pre><code class="bash"> 把你想更换的主题放在themes目录下。官网有很多好看的主题：https://hexo.io/themes/ 然后修改站点目录下的_config.yml配置文件找到themes: landscape(默认主题)修改成你在themes下放好的主题，就完成了</code></pre><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue May 05 2020 20:06:16 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;记录一些我学到hexo命令&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://howsyc.cn/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://howsyc.cn/tags/hexo/"/>
    
  </entry>
  
</feed>
